        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 6 returned 100% blocks executed 100%
        6:   11:void assertTrue(int a, int b) {
        -:   12:
        6:   13:	if (a == b) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        3:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
        3:   17:		printf("->Test did not Pass\n");
call    0 returned 100%
        3:   18:		failed++;
        -:   19:	}
        6:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 93%
        1:   22:int main() {
        1:   23:	int seed = 100;
        -:   24:	struct gameState G, testG; 
        1:   25:	int numPlayers = 2;
        1:   26:	int thisPlayer = 0;
        1:   27:	int handpos = 0;
        1:   28:	int choice1 = 0, choice2 = 0, choice3 = 0;  // adventurer do not use this, but must be added in the function cardEffect
        1:   29:	int bouns = 0;
        1:   30:	int newCards = 0;
        1:   31:	int shuffledCards = 0;
        1:   32:	int treasureCount2 = 0;
        1:   33:	int treasureCount1 = 0;
        -:   34:
        1:   35:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   36:		sea_hag, tribute, smithy };
        -:   37:
        -:   38:	// initialize  the game state
        1:   39:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   40:
        1:   41:	printf("----Testing adventurer_card----");
call    0 returned 100%
        -:   42:
        -:   43:	// copy the game state 
        1:   44:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   45:
        1:   46:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bouns);
call    0 returned 100%
        -:   47:
        1:   48:	newCards = 2;
        1:   49:	int xtraCoins = 0;
        -:   50:	
        -:   51:
        1:   52:	printf("\n Player0 receives 2 cards\n");
call    0 returned 100%
        1:   53:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards );
call    0 returned 100%
        1:   54:	assertTrue(testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards);
call    0 returned 100%
        -:   55:
        1:   56:	printf("\n Player0 gains 2 cards from the discarded piles\n");
call    0 returned 100%
        1:   57:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        1:   58:	assertTrue(testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        -:   59:
        1:   60:	printf("\n Player0 got playedCardCount\n");
call    0 returned 100%
        1:   61:	printf("coins = %d, expected = %d\n", testG.playedCardCount, G.playedCardCount);
call    0 returned 100%
        1:   62:	assertTrue(testG.playedCardCount, G.playedCardCount);
call    0 returned 100%
        -:   63:
        1:   64:	printf("\n Player0 Coin count\n");
call    0 returned 100%
        1:   65:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        1:   66:	assertTrue(testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        -:   67:
        -:   68:
        1:   69:	printf("\n Player0 number of Action  card\n");
call    0 returned 100%
        1:   70:	printf("numAction = %d, expected = %d\n", testG.numActions, G.numActions);
call    0 returned 100%
        1:   71:	assertTrue(testG.numActions, G.numActions);
call    0 returned 100%
        -:   72:
        -:   73:	// check treasure count after
        -:   74:	
        1:   75:	int cardIndex = 0;
        7:   76:	while (cardIndex < G.handCount[thisPlayer])
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   77:	{
        5:   78:		int card = G.hand[thisPlayer][cardIndex];
        5:   79:		if (card == copper || card == silver || card == gold) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:   80:			treasureCount2++;
        -:   81:		}
        5:   82:		cardIndex++;
        -:   83:	};
        -:   84:
        -:   85:	// check treasure count before 
        1:   86:	int cardIndex1 = 0;
        8:   87:	while (cardIndex1 < testG.handCount[thisPlayer])
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:   88:	{
        6:   89:		int card = testG.hand[thisPlayer][cardIndex];
        6:   90:		if (card == copper || card == silver || card == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        6:   91:			treasureCount1++;
        -:   92:		}
        6:   93:		cardIndex1++;
        -:   94:	};
        -:   95:
        -:   96:	
        1:   97:	printf("\nPlayer0 gains 2 treasure cards\n");
call    0 returned 100%
        1:   98:	assertTrue(treasureCount1 + 2, treasureCount2);
call    0 returned 100%
        -:   99:
        1:  100:	if (!failed) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  101:		printf("\n Test Successfully Completed\n");
call    0 never executed
        -:  102:	}
        -:  103:	else {
        1:  104:		printf("\n Test Failed\n");
call    0 returned 100%
        -:  105:	}
        1:  106:	printf("\n");
call    0 returned 100%
        1:  107:	return 0;
        -:  108:}
