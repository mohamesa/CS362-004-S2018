        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 28 returned 100% blocks executed 60%
       28:   11:void assertTrue(int a, int b) {
        -:   12:
       28:   13:	if (a == b) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       28:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
    #####:   17:		printf("->Test did not Pass\n");
call    0 never executed
    #####:   18:		failed++;
        -:   19:	}
       28:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 99%
        1:   22:int main() {
        -:   23:
        1:   24:	printf("----Testing getCost----");
call    0 returned 100%
        -:   25:
        1:   26:	printf("\n 5 crads in hand at the start of the game\n");
call    0 returned 100%
        -:   27:
        1:   28:	printf("getcost = %d, expected = %d\n", getCost(mine), 5);
call    0 returned 100%
call    1 returned 100%
        1:   29:	assertTrue(getCost(mine), 5);
call    0 returned 100%
call    1 returned 100%
        -:   30:
        1:   31:	printf("getcost = %d, expected = %d\n", getCost(adventurer), 6);
call    0 returned 100%
call    1 returned 100%
        1:   32:	assertTrue(getCost(adventurer), 6);
call    0 returned 100%
call    1 returned 100%
        -:   33:
        1:   34:	printf("getcost = %d, expected = %d\n", getCost(smithy), 4);
call    0 returned 100%
call    1 returned 100%
        1:   35:	assertTrue(getCost(smithy), 4);
call    0 returned 100%
call    1 returned 100%
        -:   36:
        1:   37:	printf("getcost = %d, expected = %d\n", getCost(village), 3);
call    0 returned 100%
call    1 returned 100%
        1:   38:	assertTrue(getCost(village), 3);
call    0 returned 100%
call    1 returned 100%
        -:   39:
        1:   40:	printf("getcost = %d, expected = %d\n", getCost(great_hall), 3);
call    0 returned 100%
call    1 returned 100%
        1:   41:	assertTrue(getCost(great_hall), 3);
call    0 returned 100%
call    1 returned 100%
        -:   42:
        1:   43:	printf("getcost = %d, expected = %d\n", getCost(minion), 5);
call    0 returned 100%
call    1 returned 100%
        1:   44:	assertTrue(getCost(minion), 5);
call    0 returned 100%
call    1 returned 100%
        -:   45:
        1:   46:	printf("getcost = %d, expected = %d\n", getCost(feast), 4);
call    0 returned 100%
call    1 returned 100%
        1:   47:	assertTrue(getCost(feast), 4);
call    0 returned 100%
call    1 returned 100%
        -:   48:
        1:   49:	printf("getcost = %d, expected = %d\n", getCost(gardens), 4);
call    0 returned 100%
call    1 returned 100%
        1:   50:	assertTrue(getCost(gardens), 4);
call    0 returned 100%
call    1 returned 100%
        -:   51:
        1:   52:	printf("getcost = %d, expected = %d\n", getCost(silver), 3);
call    0 returned 100%
call    1 returned 100%
        1:   53:	assertTrue(getCost(silver), 3);
call    0 returned 100%
call    1 returned 100%
        -:   54:
        1:   55:	printf("getcost = %d, expected = %d\n", getCost(feast), 4);
call    0 returned 100%
call    1 returned 100%
        1:   56:	assertTrue(getCost(feast), 4);
call    0 returned 100%
call    1 returned 100%
        -:   57:
        1:   58:	printf("getcost = %d, expected = %d\n", getCost(council_room), 5);
call    0 returned 100%
call    1 returned 100%
        1:   59:	assertTrue(getCost(council_room), 5);
call    0 returned 100%
call    1 returned 100%
        -:   60:
        1:   61:	printf("getcost = %d, expected = %d\n", getCost(steward), 3);
call    0 returned 100%
call    1 returned 100%
        1:   62:	assertTrue(getCost(steward), 3);
call    0 returned 100%
call    1 returned 100%
        -:   63:
        1:   64:	printf("getcost = %d, expected = %d\n", getCost(sea_hag), 4);
call    0 returned 100%
call    1 returned 100%
        1:   65:	assertTrue(getCost(sea_hag), 4);
call    0 returned 100%
call    1 returned 100%
        -:   66:	
        1:   67:	printf("getcost = %d, expected = %d\n", getCost(salvager), 4);
call    0 returned 100%
call    1 returned 100%
        1:   68:	assertTrue(getCost(salvager), 4);
call    0 returned 100%
call    1 returned 100%
        -:   69:
        1:   70:	printf("getcost = %d, expected = %d\n", getCost(curse), 0);
call    0 returned 100%
call    1 returned 100%
        1:   71:	assertTrue(getCost(curse), 0);
call    0 returned 100%
call    1 returned 100%
        -:   72:
        1:   73:	printf("getcost = %d, expected = %d\n", getCost(estate), 2);
call    0 returned 100%
call    1 returned 100%
        1:   74:	assertTrue(getCost(estate), 2);
call    0 returned 100%
call    1 returned 100%
        -:   75:
        1:   76:	printf("getcost = %d, expected = %d\n", getCost(duchy), 5);
call    0 returned 100%
call    1 returned 100%
        1:   77:	assertTrue(getCost(duchy), 5);
call    0 returned 100%
call    1 returned 100%
        -:   78:
        1:   79:	printf("getcost = %d, expected = %d\n", getCost(province), 8);
call    0 returned 100%
call    1 returned 100%
        1:   80:	assertTrue(getCost(province), 8);
call    0 returned 100%
call    1 returned 100%
        -:   81:
        1:   82:	printf("getcost = %d, expected = %d\n", getCost(copper), 0);
call    0 returned 100%
call    1 returned 100%
        1:   83:	assertTrue(getCost(copper), 0);
call    0 returned 100%
call    1 returned 100%
        -:   84:
        1:   85:	printf("getcost = %d, expected = %d\n", getCost(gold), 6);
call    0 returned 100%
call    1 returned 100%
        1:   86:	assertTrue(getCost(gold), 6);
call    0 returned 100%
call    1 returned 100%
        -:   87:
        1:   88:	printf("getcost = %d, expected = %d\n", getCost(remodel), 4);
call    0 returned 100%
call    1 returned 100%
        1:   89:	assertTrue(getCost(remodel), 4);
call    0 returned 100%
call    1 returned 100%
        -:   90:
        1:   91:	printf("getcost = %d, expected = %d\n", getCost(baron), 4);
call    0 returned 100%
call    1 returned 100%
        1:   92:	assertTrue(getCost(baron), 4);
call    0 returned 100%
call    1 returned 100%
        -:   93:
        1:   94:	printf("getcost = %d, expected = %d\n", getCost(ambassador),3);
call    0 returned 100%
call    1 returned 100%
        1:   95:	assertTrue(getCost(ambassador), 3);
call    0 returned 100%
call    1 returned 100%
        -:   96:
        1:   97:	printf("getcost = %d, expected = %d\n", getCost(tribute), 5);
call    0 returned 100%
call    1 returned 100%
        1:   98:	assertTrue(getCost(tribute), 5);
call    0 returned 100%
call    1 returned 100%
        -:   99:
        1:  100:	printf("getcost = %d, expected = %d\n", getCost(embargo), 2);
call    0 returned 100%
call    1 returned 100%
        1:  101:	assertTrue(getCost(embargo), 2);
call    0 returned 100%
call    1 returned 100%
        -:  102:
        1:  103:	printf("getcost = %d, expected = %d\n", getCost(cutpurse), 4);
call    0 returned 100%
call    1 returned 100%
        1:  104:	assertTrue(getCost(cutpurse), 4);
call    0 returned 100%
call    1 returned 100%
        -:  105:
        1:  106:	printf("getcost = %d, expected = %d\n", getCost(treasure_map), 4);
call    0 returned 100%
call    1 returned 100%
        1:  107:	assertTrue(getCost(treasure_map), 4);
call    0 returned 100%
call    1 returned 100%
        -:  108:
        1:  109:	printf("getcost = %d, expected = %d\n", getCost(outpost), 5);
call    0 returned 100%
call    1 returned 100%
        1:  110:	assertTrue(getCost(outpost), 5);
call    0 returned 100%
call    1 returned 100%
        -:  111: 
        -:  112:
        1:  113:if (!failed) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  114:		printf("\n Test Successfully Completed\n");
call    0 returned 100%
        -:  115:	}
        -:  116:	else {
    #####:  117:		printf("\n Test Failed\n");
call    0 never executed
        -:  118:	}
        1:  119:	printf("\n");
call    0 returned 100%
        -:  120:
        1:  121:	return 0;
        -:  122:}
