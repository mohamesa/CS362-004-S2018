        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 4 returned 100% blocks executed 100%
        4:   11:void assertTrue(int a, int b) {
        -:   12:
        4:   13:	if (a == b) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
        2:   17:		printf("->Test did not Pass\n");
call    0 returned 100%
        2:   18:		failed++;
        -:   19:	}
        4:   20:}
        -:   21:
        -:   22:
function main called 1 returned 100% blocks executed 95%
        1:   23:int main() {
        1:   24:	int seed = 100;
        -:   25:	struct gameState G, testG; 
        -:   26:
        1:   27:	int numPlayers = 2;
        -:   28:
        1:   29:	int thisPlayer = 0;
        -:   30:
        1:   31:	int handpos = 0;
        1:   32:	int choice1 = 0, choice2 = 0, choice3 = 0;  // village_card do not use this, but must be added in the function cardEffect
        -:   33:
        1:   34:	int bouns = 0;
        1:   35:	int newCards = 0;
        1:   36:	int numActions = 0;
        1:   37:	int discarded = 1;
        1:   38:	int shuffledCards = 0;
        -:   39:
        1:   40:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   41:		sea_hag, tribute, smithy };
        -:   42:
        -:   43:	// initialize  the game state
        1:   44:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   45:
        1:   46:	printf("----Testing village_card----");
call    0 returned 100%
        -:   47:
        -:   48:	// copy the game state 
        1:   49:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   50:
        1:   51:	cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bouns);
call    0 returned 100%
        -:   52:
        1:   53:	newCards = 1;
        1:   54:	numActions = 2;
        -:   55:
        1:   56:	printf("\n Player0 receives 1 card\n");
call    0 returned 100%
        1:   57:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        1:   58:	assertTrue(testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        -:   59:
        1:   60:	printf("\n Player0 gains 1 card from the discarded piles\n");
call    0 returned 100%
        1:   61:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        1:   62:	assertTrue(testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        -:   63:
        1:   64:	printf("\n Player0 got playedCardCount\n");
call    0 returned 100%
        1:   65:	printf("coins = %d, expected = %d\n", testG.playedCardCount, G.playedCardCount);
call    0 returned 100%
        1:   66:	assertTrue(testG.playedCardCount, G.playedCardCount);
call    0 returned 100%
        -:   67:
        1:   68:	printf("\n Player0 gain 2 Action cards\n");
call    0 returned 100%
        1:   69:	printf("numAction = %d, expected = %d\n", testG.numActions, G.numActions + numActions);
call    0 returned 100%
        1:   70:	assertTrue(testG.numActions, G.numActions + numActions);
call    0 returned 100%
        -:   71:
        -:   72:
        1:   73:	if (!failed) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   74:		printf("\n Test Successfully Completed\n");
call    0 never executed
        -:   75:	}
        -:   76:	else {
        1:   77:		printf("\n Test Failed\n");
call    0 returned 100%
        -:   78:	}
        1:   79:	printf("\n");
call    0 returned 100%
        1:   80:	return 0;
        -:   81:}
