        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 8 returned 100% blocks executed 100%
        8:   11:void assertTrue(int a, int b) {
        -:   12:
        8:   13:	if (a == b) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        6:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
        2:   17:		printf("->Test did not Pass\n");
call    0 returned 100%
        2:   18:		failed++;
        -:   19:	}
        8:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 97%
        1:   22:int main() {
        1:   23:	int seed = 100;
        -:   24:	struct gameState G, testG; 
        1:   25:	int numPlayers = 2;
        1:   26:	int thisPlayer = 0;
        1:   27:	int handpos = 0;
        1:   28:	int choice1 = 0, choice2 = 0, choice3 = 0;  // smithy do not use this, but must be added in the function cardEffect
        1:   29:	int bouns = 0;
        1:   30:	int newCards = 0;
        1:   31:	int xtraCoins = 0;
        1:   32:	int discarded = 1;
        1:   33:	int shuffledCards = 0;
        -:   34:
        1:   35:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   36:		sea_hag, tribute, smithy };
        -:   37:
        -:   38:	// initialize  the game state
        1:   39:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   40:
        1:   41:	printf("----Testing smithy_card----");
call    0 returned 100%
        -:   42:
        -:   43:	// copy the game state 
        1:   44:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   45:
        1:   46:	cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bouns);
call    0 returned 100%
        -:   47:
        1:   48:	newCards = 3;
        1:   49:	xtraCoins = 0;
        -:   50:	
        1:   51:	printf("\n Player0 hand count 3 cards\n");
call    0 returned 100%
        1:   52:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        1:   53:	assertTrue(testG.handCount[thisPlayer],G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        -:   54:
        1:   55:	printf("\n Player0 deck has 3 less cards \n");
call    0 returned 100%
        1:   56:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        1:   57:	assertTrue(testG.deckCount[thisPlayer],G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        -:   58:	
        1:   59:	printf("\n Player0 Coin count\n");
call    0 returned 100%
        1:   60:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        1:   61:	assertTrue(testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        -:   62:	
        1:   63:	printf("\n Number of Action  card\n");
call    0 returned 100%
        1:   64:	printf("numAction = %d, expected = %d\n", testG.numActions, G.numActions);
call    0 returned 100%
        1:   65:	assertTrue(testG.numActions, G.numActions);
call    0 returned 100%
        -:   66:
        1:   67:	printf("\n Number of buys\n");
call    0 returned 100%
        1:   68:	printf("numBuys = %d, expected = %d\n", testG.numBuys, G.numBuys);
call    0 returned 100%
        1:   69:	assertTrue(testG.numBuys, G.numBuys);
call    0 returned 100%
        -:   70:
        1:   71:	printf("\n change of estate piles\n");
call    0 returned 100%
        1:   72:	printf("suplyCountt = %d, expected = %d\n", testG.supplyCount[estate] , G.supplyCount[estate]);
call    0 returned 100%
        1:   73:	assertTrue(testG.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        -:   74:
        1:   75:	printf("\n change of Duchy piles\n");
call    0 returned 100%
        1:   76:	printf("suplyCountt = %d, expected = %d\n", testG.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        1:   77:	assertTrue(testG.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        -:   78:
        1:   79:	printf("\n change of Province piles\n");
call    0 returned 100%
        1:   80:	printf("suplyCountt = %d, expected = %d\n", testG.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        1:   81:	assertTrue(testG.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        -:   82:
        -:   83:	
        1:   84:	if (!failed) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   85:		printf("\n Test Successfully Completed\n");
call    0 never executed
        -:   86:	}
        -:   87:	else {
        1:   88:		printf("\n Test Failed\n");
call    0 returned 100%
        -:   89:	}
        1:   90:	printf("\n");
call    0 returned 100%
        1:   91:	return 0;
        -:   92:}
        -:   93:
        -:   94:
