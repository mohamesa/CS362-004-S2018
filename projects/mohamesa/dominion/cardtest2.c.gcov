        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 9 returned 100% blocks executed 60%
        9:   11:void assertTrue(int a, int b) {
        -:   12:
        9:   13:	if (a == b) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        9:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
    #####:   17:		printf("->Test did not Pass\n");
call    0 never executed
    #####:   18:		failed++;
        -:   19:	}
        9:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 97%
        1:   22:int main() {
        1:   23:	int seed = 100;
        -:   24:	struct gameState G, testG; 
        1:   25:	int numPlayers = 2;
        1:   26:	int thisPlayer = 0;
        1:   27:	int handpos = 0;
        1:   28:	int choice1 = 0, choice2 = 0, choice3 = 0;  // great_hall do not use this, but must be added in the function cardEffect
        1:   29:	int bouns = 0;
        1:   30:	int newCards = 0;
        1:   31:	int xtraCoins = 0;
        1:   32:	int discarded = 1;
        1:   33:	int numActions = 0;
        1:   34:	int shuffledCards = 0;
        -:   35:
        1:   36:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   37:		sea_hag, tribute, smithy };
        -:   38:
        -:   39:	// initialize  the game state
        1:   40:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   41:
        1:   42:	printf("----Testing great_hall_card----");
call    0 returned 100%
        -:   43:
        -:   44:	// copy the game state 
        1:   45:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   46:
        1:   47:	cardEffect(great_hall, choice1, choice2, choice3, &testG, handpos, &bouns);
call    0 returned 100%
        -:   48:
        1:   49:	newCards = 1;
        1:   50:	xtraCoins = 0;
        1:   51:	numActions = 1;
        -:   52:	
        1:   53:	printf("\n Player0 receives 1 card\n");
call    0 returned 100%
        1:   54:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        1:   55:	assertTrue(testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        -:   56:
        1:   57:	printf("\n Deck has less Cards\n");
call    0 returned 100%
        1:   58:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        1:   59:	assertTrue(testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        -:   60:
        1:   61:	printf("\n Number of card discarded\n");
call    0 returned 100%
        1:   62:	printf("coins = %d, expected = %d\n", testG.playedCardCount, G.playedCardCount +discarded);
call    0 returned 100%
        1:   63:	assertTrue(testG.playedCardCount, G.playedCardCount+ discarded);
call    0 returned 100%
        -:   64:	 
        1:   65:	printf("\n Coin count\n");
call    0 returned 100%
        1:   66:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        1:   67:	assertTrue(testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        -:   68:
        1:   69:	printf("\n Player0 number of Action  card\n");
call    0 returned 100%
        1:   70:	printf("numAction= %d, expected = %d\n", testG.numActions, G.numActions + numActions);
call    0 returned 100%
        1:   71:	assertTrue(testG.numActions, G.numActions + numActions);
call    0 returned 100%
        -:   72:
        1:   73:	printf("\n Number of buys\n");
call    0 returned 100%
        1:   74:	printf("numBuys = %d, expected = %d\n", testG.numBuys, G.numBuys);
call    0 returned 100%
        1:   75:	assertTrue(testG.numBuys, G.numBuys);
call    0 returned 100%
        -:   76:
        1:   77:	printf("\n change of estate piles\n");
call    0 returned 100%
        1:   78:	printf("suplyCountt = %d, expected = %d\n", testG.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        1:   79:	assertTrue(testG.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        -:   80:
        1:   81:	printf("\n change of Duchy piles\n");
call    0 returned 100%
        1:   82:	printf("suplyCountt = %d, expected = %d\n", testG.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        1:   83:	assertTrue(testG.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        -:   84:
        1:   85:	printf("\n change of Province piles\n");
call    0 returned 100%
        1:   86:	printf("suplyCountt = %d, expected = %d\n", testG.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        1:   87:	assertTrue(testG.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        -:   88:
        1:   89:	if (!failed) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   90:		printf("\n Test Successfully Completed\n");
call    0 returned 100%
        -:   91:	}
        -:   92:	else {
    #####:   93:		printf("\n Test Failed\n");
call    0 never executed
        -:   94:	}
        1:   95:	printf("\n");
call    0 returned 100%
        1:   96:	return 0;
        -:   97:}
