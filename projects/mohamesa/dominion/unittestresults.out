unittest1.c:
----Testing isGameOver----
 Game is  over 
 supply count = 0, expected = 0
->Test Passed

 Game is Over 
 supply count = 1, expected = 1
->Test Passed

 Game is Over 
 supply count = 1, expected = 1
->Test Passed

 Game is Over 
 supply count = 1, expected = 1
->Test Passed

 Test Successfully Completed

File 'unittest1.c'
Lines executed:93.02% of 43
Creating 'unittest1.c.gcov'

File 'unittest1.c'
Lines executed:93.02% of 43
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:92.86% of 28
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:   
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 4 returned 100% blocks executed 60%
        4:   11:void assertTrue(int a, int b) {
        -:   12:
        4:   13:	if (a == b) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
    #####:   17:		printf("->Test did not Pass\n");
call    0 never executed
    #####:   18:		failed++;
        -:   19:	}
        4:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 97%
        1:   22:int main() {
        1:   23:	int seed = 100;
        -:   24:	struct gameState testG, G;
        1:   25:	int numPlayers = 2;
        1:   26:	int supplyPilesNum = 25;
        -:   27:
        1:   28:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   29:		sea_hag, tribute, smithy };
        -:   30:
        -:   31:	// initialize  the game state
        1:   32:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   33:
        -:   34:	int i;
       26:   35:	for (i = 0; i < supplyPilesNum; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       25:   36:		G.supplyCount[i] = 1;
        1:   37:		isGameOver(&G);
call    0 returned 100%
        -:   38:
        1:   39:	printf("----Testing isGameOver----");
call    0 returned 100%
        -:   40:	
        -:   41:	// copy the game state 
        1:   42:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   43:
        1:   44:	printf("\n Game is  over \n");
call    0 returned 100%
        1:   45:	printf(" supply count = %d, expected = %d\n", isGameOver(&G), 0);
call    0 returned 100%
call    1 returned 100%
        1:   46:	assertTrue(isGameOver(&G),  0);
call    0 returned 100%
call    1 returned 100%
        -:   47:	
        1:   48:	printf("\n Game is Over \n");
call    0 returned 100%
        1:   49:	G.supplyCount[province] = 0;
        1:   50:	printf(" supply count = %d, expected = %d\n", isGameOver(&G), 1);
call    0 returned 100%
call    1 returned 100%
        1:   51:	assertTrue(isGameOver(&G), 1);
call    0 returned 100%
call    1 returned 100%
        -:   52:
        1:   53:	printf("\n Game is Over \n");
call    0 returned 100%
        1:   54:	G.supplyCount[province] = 1;
        1:   55:	G.supplyCount[gold] = 0;
        1:   56:	G.supplyCount[mine] = 0;
        1:   57:	G.supplyCount[village] = 0;
        1:   58:	printf(" supply count = %d, expected = %d\n", isGameOver(&G), 1);
call    0 returned 100%
call    1 returned 100%
        1:   59:	assertTrue(isGameOver(&G), 1);
call    0 returned 100%
call    1 returned 100%
        -:   60:	
        1:   61:	printf("\n Game is Over \n");
call    0 returned 100%
        1:   62:	G.supplyCount[province] = 1;
        1:   63:	G.supplyCount[smithy] = 0;
        1:   64:	G.supplyCount[treasure_map] = 0;
        1:   65:	G.supplyCount[great_hall] = 0;
        1:   66:	printf(" supply count = %d, expected = %d\n", isGameOver(&G), 1);
call    0 returned 100%
call    1 returned 100%
        1:   67:	assertTrue(isGameOver(&G), 1);
call    0 returned 100%
call    1 returned 100%
        -:   68:
        1:   69:if (!failed) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   70:		printf("\n Test Successfully Completed\n");
call    0 returned 100%
        -:   71:	}
        -:   72:	else {
    #####:   73:		printf("\n Test Failed\n");
call    0 never executed
        -:   74:	}
        1:   75:	printf("\n");
call    0 returned 100%
        -:   76:
        1:   77:	return 0;
        -:   78:}
File 'dominion.c'
Lines executed:17.58% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       72:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       52:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        9:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        7:  401:  j = 0;
      182:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      175:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       16:  406:	  j++;
        -:  407:	}
        -:  408:    }
        7:  409:  if ( j >= 3)
        -:  410:    {
        4:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:// refactored/bugs added card
    #####:  647:void adventurer_card (int currentPlayer, int temphand[], struct gameState *state, int z){
        -:  648:
        -:  649:int cardDrawn;
    #####:  650:int drawntreasure = 0;
        -:  651:
        -:  652: // changed the drawn treasure cards to 1 instead of 2
    #####:  653:while (drawntreasure<1) {
    #####:  654:	if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:		shuffle(currentPlayer, state);
        -:  656: 	}
    #####:  657:	drawCard(currentPlayer, state);
    #####:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  660:	drawntreasure++;
        -:  661:	else {
    #####:  662:		temphand[z] = cardDrawn;
    #####:  663:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:		z++;
        -:  665:		}
        -:  666:	}	
    #####:  667:																					while (z - 1 >= 0) {
    #####:  668:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:		z  = z - 1;
        -:  670:	}
    #####:  671:}
        -:  672:
    #####:  673:void feast_card(struct gameState *state, int currentPlayer, int temphand[], int choice1){
        -:  674://gain card with cost up to 5
        -:  675://Backup hand
        -:  676:int i;
        -:  677:int x;	    
        -:  678:
    #####:  679:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  680:          temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  681:          state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  682:     }
        -:  683:    //Backup hand
        -:  684:    
        -:  685:   //Update Coins for Buy
    #####:  686:    updateCoins(currentPlayer, state, 5);
    #####:  687:    x = 1;//Condition to loop on
    #####:  688:    while( x == 1) {//Buy one card
    #####:  689: 	   if (supplyCount(choice1, state) <= 0){
        -:  690:         	  if (DEBUG)
        -:  691:	                  printf("None of that card left, sorry!\n");
        -:  692:
        -:  693:                  if (DEBUG){
        -:  694:                         printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  695:                  }
        -:  696:          }
    #####:  697:	 else if (state->coins < getCost(choice1)){
    #####:  698:              printf("That card is too expensive!\n");
        -:  699:
        -:  700:                  if (DEBUG){
        -:  701:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  702:	          }
        -:  703:	                                                                                                                                                             }
        -:  704:       else{
        -:  705:                  if (DEBUG){
        -:  706:                       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:                   }
    #####:  708:                 gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  709:                 x = 0;//No more buying cards
        -:  710:                 if (DEBUG){
        -:  711:                      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:             }
        -:  713:        }
        -:  714:   }
        -:  715://Reset Hand
    #####:  716:     for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  717:     state->hand[currentPlayer][i] = temphand[i];
    #####:  718:     temphand[i] = -1;
        -:  719:     }
    #####:  720:}                                                                                                                                                                                                                                                                                                
        -:  721:// refactored/bugs added cards
    #####:  722:void smithy_card(int currentPlayer, struct gameState *state, int handPos){
        -:  723:int i;
        -:  724://  changed +3 Cards to +2 Cards
    #####:  725:	for (i = 0; i < 2; i++)
        -:  726:	{
    #####:  727:		drawCard(currentPlayer, state);
        -:  728:	}
        -:  729:
        -:  730:	//discard card from hand
    #####:  731:	discardCard(handPos, currentPlayer, state, 0);
    #####:  732:}
        -:  733:
        -:  734:// refactored/bugs added cards
    #####:  735:void village_card (int currentPlayer,struct gameState *state, int handPos){
        -:  736:   //+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	// changed the +2 Actions to +3 Actions
    #####:  740:	state->numActions = state->numActions + 3;
        -:  741:
        -:  742:	//discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
    #####:  744:}
        -:  745: 
        -:  746:// refactored/bugs added cards
    #####:  747:void minion_card(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2){
        -:  748: 
        -:  749: //+1 action 
    #####:  750:	 state->numActions++;	
        -:  751:	//discard card from hand
    #####:  752:	discardCard(handPos, currentPlayer, state, 0);		
        -:  753:	
    #####:  754:	if (choice1)		// changed +2 coins to +3 coins
        -:  755:	{
    #####:  756:			state->coins = state->coins + 3;
        -:  757:	}
        -:  758:
    #####:  759:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  760:	{
        -:  761:		//discard hand
    #####:  762:		while (numHandCards(state) > 0)
        -:  763:		{
    #####:  764:			discardCard(handPos, currentPlayer, state, 0);
        -:  765:		}
        -:  766:
        -:  767:		//draw 4
        -:  768:		int i;		
    #####:  769:		for (i = 0; i < 4; i++)
        -:  770:		{
    #####:  771:			drawCard(currentPlayer, state);
        -:  772:		}
        -:  773:
        -:  774:		//other players discard hand and redraw if hand size > 4
    #####:  775:		for (i = 0; i < state->numPlayers; i++)
        -:  776:			{
    #####:  777:				if (i != currentPlayer)
        -:  778:				{
    #####:  779:					if (state->handCount[i] > 4)
        -:  780:					{
        -:  781:
        -:  782:						//discard hand
    #####:  783:						while (state->handCount[i] > 0)
        -:  784:						{
    #####:  785:							discardCard(handPos, i, state, 0);
        -:  786:						}	
        -:  787:
        -:  788:						//draw 4
        -:  789:						int j;
    #####:  790:						for (j = 0; j < 4; j++)
        -:  791:						{
    #####:  792:							drawCard(i, state);
        -:  793:						}
        -:  794:					}
        -:  795:				}
        -:  796:			}
        -:  797:
        -:  798:		}
    #####:  799:}		
    #####:  800:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  801:{
        -:  802:  int i;
        -:  803:  int j;
        -:  804:  int k;
        -:  805: // int x;
        -:  806:  int index;
    #####:  807:  int currentPlayer = whoseTurn(state);
    #####:  808:  int nextPlayer = currentPlayer + 1;
        -:  809:
    #####:  810:  int tributeRevealedCards[2] = {-1, -1};
        -:  811:  int temphand[MAX_HAND];// moved above the if statement
        -:  812: // int drawntreasure=0;
        -:  813://  int cardDrawn;
    #####:  814:  int z = 0;// this is the counter for the temp hand
    #####:  815:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  816:    nextPlayer = 0;
        -:  817:  }
        -:  818:  
        -:  819:	
        -:  820:  //uses switch to select card and perform actions
    #####:  821:  switch( card ) 
        -:  822:    {
        -:  823:    case adventurer:
    #####:  824:	adventurer_card(currentPlayer, temphand, state, z);
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case council_room:
        -:  828:      //+4 Cards
    #####:  829:      for (i = 0; i < 4; i++)
        -:  830:	{
    #####:  831:	  drawCard(currentPlayer, state);
        -:  832:	}
        -:  833:			
        -:  834:      //+1 Buy
    #####:  835:      state->numBuys++;
        -:  836:			
        -:  837:      //Each other player draws a card
    #####:  838:      for (i = 0; i < state->numPlayers; i++)
        -:  839:	{
    #####:  840:	  if ( i != currentPlayer )
        -:  841:	    {
    #####:  842:	      drawCard(i, state);
        -:  843:	    }
        -:  844:	}
        -:  845:			
        -:  846:      //put played card in played card pile
    #####:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:			
    #####:  849:      return 0;
        -:  850:			
        -:  851:    case feast:
    #####:  852:      feast_card(state, currentPlayer, temphand, choice1);      			
    #####:  853:      return 0;
        -:  854:			
        -:  855:    case gardens:
    #####:  856:      return -1;
        -:  857:			
        -:  858:    case mine:
    #####:  859:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:		
    #####:  866:      if (choice2 > treasure_map || choice2 < curse)
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      gainCard(choice2, state, 2, currentPlayer);
        -:  877:
        -:  878:      //discard card from hand
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:      //discard trashed card
    #####:  882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:	{
    #####:  884:	  if (state->hand[currentPlayer][i] == j)
        -:  885:	    {
    #####:  886:	      discardCard(i, currentPlayer, state, 0);			
    #####:  887:	      break;
        -:  888:	    }
        -:  889:	}
        -:  890:			
    #####:  891:      return 0;
        -:  892:			
        -:  893:    case remodel:
        -:  894:	
    #####:  895:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  896:
    #####:  897:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  898:        {
    #####:  899:          return -1;
        -:  900:        }
        -:  901:
    #####:  902:      gainCard(choice2, state, 0, currentPlayer);
        -:  903:
        -:  904:      //discard card from hand
    #####:  905:       discardCard(handPos, currentPlayer, state, 0);
        -:  906:      
        -:  907:	//discard trashed card
    #####:  908:       for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  909:          {
    #####:  910:            if (state->hand[currentPlayer][i] == j)
        -:  911:            {
    #####:  912:        	      discardCard(i, currentPlayer, state, 0);
    #####:  913:                      break;
        -:  914:            }
        -:  915:         }
        -:  916:         
    #####:  917:	return 0;
        -:  918:
        -:  919:    case smithy:
    #####:  920: 	smithy_card (currentPlayer, state, handPos);
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case village:
    #####:  924:      village_card (currentPlayer, state, handPos);
    #####:  925:      return 0;
        -:  926:		
        -:  927:    case baron:
    #####:  928:      state->numBuys++;//Increase buys by 1!
    #####:  929:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  930:	int p = 0;//Iterator for hand!
    #####:  931:	int card_not_discarded = 1;//Flag for discard set!
    #####:  932:	while(card_not_discarded){
    #####:  933:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  934:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:	    state->discardCount[currentPlayer]++;
    #####:  937:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  938:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  939:	    }
    #####:  940:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:	    state->handCount[currentPlayer]--;
    #####:  942:	    card_not_discarded = 0;//Exit the loop
        -:  943:	  }
    #####:  944:	  else if (p > state->handCount[currentPlayer]){
        -:  945:	    if(DEBUG) {
        -:  946:	      printf("No estate cards in your hand, invalid choice\n");
        -:  947:	      printf("Must gain an estate if there are any\n");
        -:  948:	    }
    #####:  949:	    if (supplyCount(estate, state) > 0){
    #####:  950:	      gainCard(estate, state, 0, currentPlayer);
    #####:  951:	      state->supplyCount[estate]--;//Decrement estates
    #####:  952:	      if (supplyCount(estate, state) == 0){
    #####:  953:		isGameOver(state);
        -:  954:	      }
        -:  955:	    }
    #####:  956:	    card_not_discarded = 0;//Exit the loop
        -:  957:	  }
        -:  958:			    
        -:  959:	  else{
    #####:  960:	    p++;//Next card
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:			    
        -:  965:      else{
    #####:  966:	if (supplyCount(estate, state) > 0){
    #####:  967:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  968:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  969:	  if (supplyCount(estate, state) == 0){
    #####:  970:	    isGameOver(state);
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case great_hall:
        -:  979:      //+1 Card
    #####:  980:      drawCard(currentPlayer, state);
        -:  981:			
        -:  982:      //+1 Actions
    #####:  983:      state->numActions++;
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case minion:
    #####:  990:      minion_card(state, handPos, currentPlayer, choice1, choice2);
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case steward:
    #####:  994:      if (choice1 == 1)
        -:  995:	{
        -:  996:	  //+2 cards
    #####:  997:	  drawCard(currentPlayer, state);
    #####:  998:	  drawCard(currentPlayer, state);
        -:  999:	}
    #####: 1000:      else if (choice1 == 2)
        -: 1001:	{
        -: 1002:	  //+2 coins
    #####: 1003:	  state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:      else
        -: 1006:	{
        -: 1007:	  //trash 2 cards in hand
    #####: 1008:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1009:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
    #####: 1013:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case tribute:
    #####: 1017:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
    #####: 1019:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	  state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:	  state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:	  //No Card to Reveal
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("No cards to reveal\n");
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:	    
        -: 1034:      else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
    #####: 1036:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1037:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:	    state->deckCount[nextPlayer]++;
    #####: 1039:	    state->discard[nextPlayer][i] = -1;
    #####: 1040:	    state->discardCount[nextPlayer]--;
        -: 1041:	  }
        -: 1042:			    
    #####: 1043:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:      }    
        -: 1052:		       
    #####: 1053:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:      }
        -: 1058:
    #####: 1059:      for (i = 0; i <= 2; i ++){
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1061:	  state->coins += 2;
        -: 1062:	}
        -: 1063:		    
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1065:	  drawCard(currentPlayer, state);
    #####: 1066:	  drawCard(currentPlayer, state);
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:	  state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case ambassador:
    #####: 1076:      j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:      if (choice2 > 2 || choice2 < 0)
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:      if (choice1 == handPos)
        -: 1084:	{
    #####: 1085:	  return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1089:	{
    #####: 1090:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1091:	    {
    #####: 1092:	      j++;
        -: 1093:	    }
        -: 1094:	}
    #####: 1095:      if (j < choice2)
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:      //increase supply count for choosen card by amount being discarded
    #####: 1104:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:      //each other player gains a copy of revealed card
    #####: 1107:      for (i = 0; i < state->numPlayers; i++)
        -: 1108:	{
    #####: 1109:	  if (i != currentPlayer)
        -: 1110:	    {
    #####: 1111:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1112:	    }
        -: 1113:	}
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1117:
        -: 1118:      //trash copies of cards returned to supply
    #####: 1119:      for (j = 0; j < choice2; j++)
        -: 1120:	{
    #####: 1121:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:	    {
    #####: 1123:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1124:		{
    #####: 1125:		  discardCard(i, currentPlayer, state, 1);
    #####: 1126:		  break;
        -: 1127:		}
        -: 1128:	    }
        -: 1129:	}			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
        -: 1139:	    {
    #####: 1140:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		{
    #####: 1142:		  if (state->hand[i][j] == copper)
        -: 1143:		    {
    #####: 1144:		      discardCard(j, i, state, 0);
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
    #####: 1211:	if (i != currentPlayer){
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
    #####: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
    #####: 1257:  if (trashFlag < 1)
        -: 1258:    {
        -: 1259:      //add card to played pile
    #####: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
    #####: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
    #####: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
    #####: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
    #####: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
    #####: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
        1: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
        1: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
        6: 1336:  for (i = 0; i < state->handCount[player]; i++)
        -: 1337:    {
        5: 1338:      if (state->hand[player][i] == copper)
        -: 1339:	{
        4: 1340:	  state->coins += 1;
        -: 1341:	}
        1: 1342:      else if (state->hand[player][i] == silver)
        -: 1343:	{
    #####: 1344:	  state->coins += 2;
        -: 1345:	}
        1: 1346:      else if (state->hand[player][i] == gold)
        -: 1347:	{
    #####: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
        1: 1353:  state->coins += bonus;
        -: 1354:
        1: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
unittest2.c:
----Testing gainCard----
 Testing gainCard for gold

 Gold supply is empty
->Test Passed

 Card added to deck count
Deck count = 6, expected = 6
->Test Passed

 Card added to hand count
hand count = 6, expected = 6
->Test Passed

 Card added to discard count 
hand count = 1, expected = 1
->Test Passed

 Testing gainCard for silver

 Sliver supply is empty
->Test Passed

 Card added to deck count
Deck count = 7, expected = 7
->Test Passed

 Card added to hand count
hand count = 7, expected = 7
->Test Passed

 Card added to discard count 
hand count = 2, expected = 2
->Test Passed

 Decrease supplycount of Silver 
hand count = 36, expected = 36
->Test Passed

 Testing gainCard for copper

 Copper supply is empty
->Test Passed

 Card added to deck count
Deck count = 8, expected = 8
->Test Passed

 Card added to hand count
hand count = 8, expected = 8
->Test Passed

 Card added to discard count 
hand count = 4, expected = 4
->Test Passed

 Test Successfully Completed

File 'unittest2.c'
Lines executed:96.55% of 87
Creating 'unittest2.c.gcov'

File 'unittest2.c'
Lines executed:96.55% of 87
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:96.61% of 59
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 13 returned 100% blocks executed 60%
       13:   11:void assertTrue(int a, int b) {
        -:   12:
       13:   13:	if (a == b) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       13:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
    #####:   17:		printf("->Test did not Pass\n");
call    0 never executed
    #####:   18:		failed++;
        -:   19:	}
       13:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 98%
        1:   22:int main() {
        1:   23:	int seed = 100;
        -:   24:	struct gameState G, testG; 
        1:   25:	int numPlayers = 2;
        1:   26:	int thisPlayer = 0;
        1:   27:	int toflag0 = 0;
        1:   28:	int toflag1 = 1;
        1:   29:	int toflag2 = 2;
        -:   30:
        1:   31:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   32:		sea_hag, tribute, smithy };
        -:   33:
        -:   34:	// initialize  the game state
        1:   35:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   36:
        1:   37:	printf("----Testing gainCard----");
call    0 returned 100%
        -:   38:
        -:   39:	// copy the game state 
        1:   40:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   41:
        1:   42:	printf("\n Testing gainCard for gold\n");
call    0 returned 100%
        -:   43:
        1:   44:	printf("\n Gold supply is empty\n"); 
call    0 returned 100%
        1:   45:	G.supplyCount[gold] = 0;
        1:   46:	assertTrue(gainCard(gold, &G, toflag0, thisPlayer), - 1);
call    0 returned 100%
call    1 returned 100%
        1:   47:	G.supplyCount[gold] = 30;
        -:   48:
        1:   49:	printf("\n Card added to deck count\n");
call    0 returned 100%
        1:   50:	int deckCount = G.deckCount[0];
        1:   51:	gainCard(gold, &G, toflag1, thisPlayer);
call    0 returned 100%
        1:   52:	printf("Deck count = %d, expected = %d\n",  G.deckCount[0] ,deckCount + 1);
call    0 returned 100%
        1:   53:	assertTrue( G.deckCount[0] , deckCount + 1);
call    0 returned 100%
        -:   54:	
        1:   55:	printf("\n Card added to hand count\n");
call    0 returned 100%
        1:   56:	int handCount = G.handCount[0];
        1:   57:	gainCard(gold, &G, toflag2, thisPlayer);
call    0 returned 100%
        1:   58:	printf("hand count = %d, expected = %d\n",  G.handCount[0] ,handCount+ 1);
call    0 returned 100%
        1:   59:	assertTrue( G.handCount[0] , handCount + 1);
call    0 returned 100%
        -:   60:
        1:   61:	printf("\n Card added to discard count \n");
call    0 returned 100%
        1:   62:	int discardCount = G.discardCount[0];
        1:   63:	gainCard(gold, &G, toflag0, thisPlayer);
call    0 returned 100%
        1:   64:	printf("hand count = %d, expected = %d\n", G.discardCount[0] , discardCount + 1);
call    0 returned 100%
        1:   65:	assertTrue( G.discardCount[0] , discardCount + 1);
call    0 returned 100%
        -:   66:	
        1:   67:	printf("\n Testing gainCard for silver\n");
call    0 returned 100%
        -:   68:
        1:   69:	printf("\n Sliver supply is empty\n");
call    0 returned 100%
        1:   70:	G.supplyCount[silver] = 0;
        1:   71:	assertTrue(gainCard(silver, &G, toflag0, thisPlayer), -1);
call    0 returned 100%
call    1 returned 100%
        1:   72:	G.supplyCount[silver] = 40;
        -:   73:
        1:   74:	printf("\n Card added to deck count\n");
call    0 returned 100%
        1:   75:	int deckCount1 = G.deckCount[0];
        1:   76:	gainCard(silver, &G, toflag1, thisPlayer);
call    0 returned 100%
        1:   77:	printf("Deck count = %d, expected = %d\n", G.deckCount[0], deckCount1 + 1);
call    0 returned 100%
        1:   78:	assertTrue(G.deckCount[0], deckCount1+ 1);
call    0 returned 100%
        -:   79:
        1:   80:	printf("\n Card added to hand count\n");
call    0 returned 100%
        1:   81:	int handCount1 = G.handCount[0];
        1:   82:	gainCard(silver, &G, toflag2, thisPlayer);
call    0 returned 100%
        1:   83:	printf("hand count = %d, expected = %d\n",  G.handCount[0] , handCount1 + 1);
call    0 returned 100%
        1:   84:	assertTrue( G.handCount[0] , handCount1 + 1);
call    0 returned 100%
        -:   85:
        1:   86:	printf("\n Card added to discard count \n");
call    0 returned 100%
        1:   87:	int discardCount1 = G.discardCount[0];
        1:   88:	gainCard(silver, &G, toflag0, thisPlayer);
call    0 returned 100%
        1:   89:	printf("hand count = %d, expected = %d\n", G.discardCount[0], discardCount1 + 1);
call    0 returned 100%
        1:   90:	assertTrue(G.discardCount[0], discardCount1 + 1);
call    0 returned 100%
        -:   91:
        1:   92:	printf("\n Decrease supplycount of Silver \n");
call    0 returned 100%
        1:   93:	int silverSupplycount = G.supplyCount[silver];
        1:   94:	gainCard(silver, &G, toflag0, thisPlayer);
call    0 returned 100%
        1:   95:	printf("hand count = %d, expected = %d\n", G.supplyCount[silver], silverSupplycount - 1);
call    0 returned 100%
        1:   96:	assertTrue(G.supplyCount[silver], silverSupplycount - 1 );
call    0 returned 100%
        -:   97:
        1:   98:	printf("\n Testing gainCard for copper\n");
call    0 returned 100%
        -:   99:
        1:  100:	printf("\n Copper supply is empty\n"); 
call    0 returned 100%
        1:  101:	G.supplyCount[copper] = 0;
        1:  102:	assertTrue(gainCard(copper, &G, toflag0, thisPlayer), - 1);
call    0 returned 100%
call    1 returned 100%
        1:  103:	G.supplyCount[copper] = 46;
        -:  104:
        1:  105:	printf("\n Card added to deck count\n");
call    0 returned 100%
        1:  106:	int deckCount2= G.deckCount[0];
        1:  107:	gainCard(copper, &G, toflag1, thisPlayer);
call    0 returned 100%
        1:  108:	printf("Deck count = %d, expected = %d\n",  G.deckCount[0] ,deckCount2+ 1);
call    0 returned 100%
        1:  109:	assertTrue( G.deckCount[0] , deckCount2 + 1);
call    0 returned 100%
        -:  110:	
        1:  111:	printf("\n Card added to hand count\n");
call    0 returned 100%
        1:  112:	int handCount2= G.handCount[0];
        1:  113:	gainCard(copper, &G, toflag2, thisPlayer);
call    0 returned 100%
        1:  114:	printf("hand count = %d, expected = %d\n",  G.handCount[0] , handCount2 + 1);
call    0 returned 100%
        1:  115:	assertTrue( G.handCount[0] , handCount2 + 1);
call    0 returned 100%
        -:  116:
        1:  117:	printf("\n Card added to discard count \n");
call    0 returned 100%
        1:  118:	int discardCount2 = G.discardCount[0];
        1:  119:	gainCard(copper, &G, toflag0, thisPlayer);
call    0 returned 100%
        1:  120:	printf("hand count = %d, expected = %d\n", G.discardCount[0], discardCount2 + 1);
call    0 returned 100%
        1:  121:	assertTrue(G.discardCount[0], discardCount2 + 1);
call    0 returned 100%
        -:  122:
        1:  123:	if (!failed) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  124:		printf("\n Test Successfully Completed\n");
call    0 returned 100%
        -:  125:	}
        -:  126:	else {
    #####:  127:		printf("\n Test Failed\n");
call    0 never executed
        -:  128:	}
        1:  129:	printf("\n");
call    0 returned 100%
        1:  130:	return 0;
        -:  131:}
        -:  132:
        -:  133:
        -:  134:
        -:  135:
File 'dominion.c'
Lines executed:20.25% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       60:    8:int compare(const void* a, const void* b) {
       60:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       60:   11:  if (*(int*)a < *(int*)b)
       16:   12:    return -1;
       44:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        2:   44:  SelectStream(1);
        2:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       20:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       18:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        6:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        4:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       12:  143:	  state->deck[i][j] = estate;
       12:  144:	  state->deckCount[i]++;
        -:  145:	}
       32:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       28:  148:	  state->deck[i][j] = copper;
       28:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        6:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        4:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        6:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        4:  166:      state->handCount[i] = 0;
        4:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
       10:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        2:  198:  return 0;
        -:  199:}
        -:  200:
        4:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        4:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       48:  214:  while (state->deckCount[player] > 0) {
       40:  215:    card = floor(Random() * state->deckCount[player]);
       40:  216:    newDeck[newDeckPos] = state->deck[player][card];
       40:  217:    newDeckPos++;
      144:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      104:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       40:  221:    state->deckCount[player]--;
        -:  222:  }
       44:  223:  for (i = 0; i < newDeckPos; i++) {
       40:  224:    state->deck[player][i] = newDeck[i];
       40:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        4:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       13:  320:int supplyCount(int card, struct gameState *state) {
       13:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        9:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        7:  401:  j = 0;
      182:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      175:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       16:  406:	  j++;
        -:  407:	}
        -:  408:    }
        7:  409:  if ( j >= 3)
        -:  410:    {
        4:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       10:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       10:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       10:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       10:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  576:    state->deckCount[player]--;
       10:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       10:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:// refactored/bugs added card
    #####:  647:void adventurer_card (int currentPlayer, int temphand[], struct gameState *state, int z){
        -:  648:
        -:  649:int cardDrawn;
    #####:  650:int drawntreasure = 0;
        -:  651:
        -:  652: // changed the drawn treasure cards to 1 instead of 2
    #####:  653:while (drawntreasure<1) {
    #####:  654:	if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:		shuffle(currentPlayer, state);
        -:  656: 	}
    #####:  657:	drawCard(currentPlayer, state);
    #####:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  660:	drawntreasure++;
        -:  661:	else {
    #####:  662:		temphand[z] = cardDrawn;
    #####:  663:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:		z++;
        -:  665:		}
        -:  666:	}	
    #####:  667:																					while (z - 1 >= 0) {
    #####:  668:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:		z  = z - 1;
        -:  670:	}
    #####:  671:}
        -:  672:
    #####:  673:void feast_card(struct gameState *state, int currentPlayer, int temphand[], int choice1){
        -:  674://gain card with cost up to 5
        -:  675://Backup hand
        -:  676:int i;
        -:  677:int x;	    
        -:  678:
    #####:  679:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  680:          temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  681:          state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  682:     }
        -:  683:    //Backup hand
        -:  684:    
        -:  685:   //Update Coins for Buy
    #####:  686:    updateCoins(currentPlayer, state, 5);
    #####:  687:    x = 1;//Condition to loop on
    #####:  688:    while( x == 1) {//Buy one card
    #####:  689: 	   if (supplyCount(choice1, state) <= 0){
        -:  690:         	  if (DEBUG)
        -:  691:	                  printf("None of that card left, sorry!\n");
        -:  692:
        -:  693:                  if (DEBUG){
        -:  694:                         printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  695:                  }
        -:  696:          }
    #####:  697:	 else if (state->coins < getCost(choice1)){
    #####:  698:              printf("That card is too expensive!\n");
        -:  699:
        -:  700:                  if (DEBUG){
        -:  701:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  702:	          }
        -:  703:	                                                                                                                                                             }
        -:  704:       else{
        -:  705:                  if (DEBUG){
        -:  706:                       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:                   }
    #####:  708:                 gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  709:                 x = 0;//No more buying cards
        -:  710:                 if (DEBUG){
        -:  711:                      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:             }
        -:  713:        }
        -:  714:   }
        -:  715://Reset Hand
    #####:  716:     for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  717:     state->hand[currentPlayer][i] = temphand[i];
    #####:  718:     temphand[i] = -1;
        -:  719:     }
    #####:  720:}                                                                                                                                                                                                                                                                                                
        -:  721:// refactored/bugs added cards
    #####:  722:void smithy_card(int currentPlayer, struct gameState *state, int handPos){
        -:  723:int i;
        -:  724://  changed +3 Cards to +2 Cards
    #####:  725:	for (i = 0; i < 2; i++)
        -:  726:	{
    #####:  727:		drawCard(currentPlayer, state);
        -:  728:	}
        -:  729:
        -:  730:	//discard card from hand
    #####:  731:	discardCard(handPos, currentPlayer, state, 0);
    #####:  732:}
        -:  733:
        -:  734:// refactored/bugs added cards
    #####:  735:void village_card (int currentPlayer,struct gameState *state, int handPos){
        -:  736:   //+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	// changed the +2 Actions to +3 Actions
    #####:  740:	state->numActions = state->numActions + 3;
        -:  741:
        -:  742:	//discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
    #####:  744:}
        -:  745: 
        -:  746:// refactored/bugs added cards
    #####:  747:void minion_card(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2){
        -:  748: 
        -:  749: //+1 action 
    #####:  750:	 state->numActions++;	
        -:  751:	//discard card from hand
    #####:  752:	discardCard(handPos, currentPlayer, state, 0);		
        -:  753:	
    #####:  754:	if (choice1)		// changed +2 coins to +3 coins
        -:  755:	{
    #####:  756:			state->coins = state->coins + 3;
        -:  757:	}
        -:  758:
    #####:  759:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  760:	{
        -:  761:		//discard hand
    #####:  762:		while (numHandCards(state) > 0)
        -:  763:		{
    #####:  764:			discardCard(handPos, currentPlayer, state, 0);
        -:  765:		}
        -:  766:
        -:  767:		//draw 4
        -:  768:		int i;		
    #####:  769:		for (i = 0; i < 4; i++)
        -:  770:		{
    #####:  771:			drawCard(currentPlayer, state);
        -:  772:		}
        -:  773:
        -:  774:		//other players discard hand and redraw if hand size > 4
    #####:  775:		for (i = 0; i < state->numPlayers; i++)
        -:  776:			{
    #####:  777:				if (i != currentPlayer)
        -:  778:				{
    #####:  779:					if (state->handCount[i] > 4)
        -:  780:					{
        -:  781:
        -:  782:						//discard hand
    #####:  783:						while (state->handCount[i] > 0)
        -:  784:						{
    #####:  785:							discardCard(handPos, i, state, 0);
        -:  786:						}	
        -:  787:
        -:  788:						//draw 4
        -:  789:						int j;
    #####:  790:						for (j = 0; j < 4; j++)
        -:  791:						{
    #####:  792:							drawCard(i, state);
        -:  793:						}
        -:  794:					}
        -:  795:				}
        -:  796:			}
        -:  797:
        -:  798:		}
    #####:  799:}		
    #####:  800:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  801:{
        -:  802:  int i;
        -:  803:  int j;
        -:  804:  int k;
        -:  805: // int x;
        -:  806:  int index;
    #####:  807:  int currentPlayer = whoseTurn(state);
    #####:  808:  int nextPlayer = currentPlayer + 1;
        -:  809:
    #####:  810:  int tributeRevealedCards[2] = {-1, -1};
        -:  811:  int temphand[MAX_HAND];// moved above the if statement
        -:  812: // int drawntreasure=0;
        -:  813://  int cardDrawn;
    #####:  814:  int z = 0;// this is the counter for the temp hand
    #####:  815:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  816:    nextPlayer = 0;
        -:  817:  }
        -:  818:  
        -:  819:	
        -:  820:  //uses switch to select card and perform actions
    #####:  821:  switch( card ) 
        -:  822:    {
        -:  823:    case adventurer:
    #####:  824:	adventurer_card(currentPlayer, temphand, state, z);
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case council_room:
        -:  828:      //+4 Cards
    #####:  829:      for (i = 0; i < 4; i++)
        -:  830:	{
    #####:  831:	  drawCard(currentPlayer, state);
        -:  832:	}
        -:  833:			
        -:  834:      //+1 Buy
    #####:  835:      state->numBuys++;
        -:  836:			
        -:  837:      //Each other player draws a card
    #####:  838:      for (i = 0; i < state->numPlayers; i++)
        -:  839:	{
    #####:  840:	  if ( i != currentPlayer )
        -:  841:	    {
    #####:  842:	      drawCard(i, state);
        -:  843:	    }
        -:  844:	}
        -:  845:			
        -:  846:      //put played card in played card pile
    #####:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:			
    #####:  849:      return 0;
        -:  850:			
        -:  851:    case feast:
    #####:  852:      feast_card(state, currentPlayer, temphand, choice1);      			
    #####:  853:      return 0;
        -:  854:			
        -:  855:    case gardens:
    #####:  856:      return -1;
        -:  857:			
        -:  858:    case mine:
    #####:  859:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:		
    #####:  866:      if (choice2 > treasure_map || choice2 < curse)
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      gainCard(choice2, state, 2, currentPlayer);
        -:  877:
        -:  878:      //discard card from hand
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:      //discard trashed card
    #####:  882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:	{
    #####:  884:	  if (state->hand[currentPlayer][i] == j)
        -:  885:	    {
    #####:  886:	      discardCard(i, currentPlayer, state, 0);			
    #####:  887:	      break;
        -:  888:	    }
        -:  889:	}
        -:  890:			
    #####:  891:      return 0;
        -:  892:			
        -:  893:    case remodel:
        -:  894:	
    #####:  895:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  896:
    #####:  897:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  898:        {
    #####:  899:          return -1;
        -:  900:        }
        -:  901:
    #####:  902:      gainCard(choice2, state, 0, currentPlayer);
        -:  903:
        -:  904:      //discard card from hand
    #####:  905:       discardCard(handPos, currentPlayer, state, 0);
        -:  906:      
        -:  907:	//discard trashed card
    #####:  908:       for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  909:          {
    #####:  910:            if (state->hand[currentPlayer][i] == j)
        -:  911:            {
    #####:  912:        	      discardCard(i, currentPlayer, state, 0);
    #####:  913:                      break;
        -:  914:            }
        -:  915:         }
        -:  916:         
    #####:  917:	return 0;
        -:  918:
        -:  919:    case smithy:
    #####:  920: 	smithy_card (currentPlayer, state, handPos);
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case village:
    #####:  924:      village_card (currentPlayer, state, handPos);
    #####:  925:      return 0;
        -:  926:		
        -:  927:    case baron:
    #####:  928:      state->numBuys++;//Increase buys by 1!
    #####:  929:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  930:	int p = 0;//Iterator for hand!
    #####:  931:	int card_not_discarded = 1;//Flag for discard set!
    #####:  932:	while(card_not_discarded){
    #####:  933:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  934:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:	    state->discardCount[currentPlayer]++;
    #####:  937:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  938:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  939:	    }
    #####:  940:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:	    state->handCount[currentPlayer]--;
    #####:  942:	    card_not_discarded = 0;//Exit the loop
        -:  943:	  }
    #####:  944:	  else if (p > state->handCount[currentPlayer]){
        -:  945:	    if(DEBUG) {
        -:  946:	      printf("No estate cards in your hand, invalid choice\n");
        -:  947:	      printf("Must gain an estate if there are any\n");
        -:  948:	    }
    #####:  949:	    if (supplyCount(estate, state) > 0){
    #####:  950:	      gainCard(estate, state, 0, currentPlayer);
    #####:  951:	      state->supplyCount[estate]--;//Decrement estates
    #####:  952:	      if (supplyCount(estate, state) == 0){
    #####:  953:		isGameOver(state);
        -:  954:	      }
        -:  955:	    }
    #####:  956:	    card_not_discarded = 0;//Exit the loop
        -:  957:	  }
        -:  958:			    
        -:  959:	  else{
    #####:  960:	    p++;//Next card
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:			    
        -:  965:      else{
    #####:  966:	if (supplyCount(estate, state) > 0){
    #####:  967:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  968:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  969:	  if (supplyCount(estate, state) == 0){
    #####:  970:	    isGameOver(state);
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case great_hall:
        -:  979:      //+1 Card
    #####:  980:      drawCard(currentPlayer, state);
        -:  981:			
        -:  982:      //+1 Actions
    #####:  983:      state->numActions++;
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case minion:
    #####:  990:      minion_card(state, handPos, currentPlayer, choice1, choice2);
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case steward:
    #####:  994:      if (choice1 == 1)
        -:  995:	{
        -:  996:	  //+2 cards
    #####:  997:	  drawCard(currentPlayer, state);
    #####:  998:	  drawCard(currentPlayer, state);
        -:  999:	}
    #####: 1000:      else if (choice1 == 2)
        -: 1001:	{
        -: 1002:	  //+2 coins
    #####: 1003:	  state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:      else
        -: 1006:	{
        -: 1007:	  //trash 2 cards in hand
    #####: 1008:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1009:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
    #####: 1013:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case tribute:
    #####: 1017:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
    #####: 1019:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	  state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:	  state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:	  //No Card to Reveal
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("No cards to reveal\n");
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:	    
        -: 1034:      else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
    #####: 1036:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1037:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:	    state->deckCount[nextPlayer]++;
    #####: 1039:	    state->discard[nextPlayer][i] = -1;
    #####: 1040:	    state->discardCount[nextPlayer]--;
        -: 1041:	  }
        -: 1042:			    
    #####: 1043:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:      }    
        -: 1052:		       
    #####: 1053:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:      }
        -: 1058:
    #####: 1059:      for (i = 0; i <= 2; i ++){
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1061:	  state->coins += 2;
        -: 1062:	}
        -: 1063:		    
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1065:	  drawCard(currentPlayer, state);
    #####: 1066:	  drawCard(currentPlayer, state);
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:	  state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case ambassador:
    #####: 1076:      j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:      if (choice2 > 2 || choice2 < 0)
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:      if (choice1 == handPos)
        -: 1084:	{
    #####: 1085:	  return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1089:	{
    #####: 1090:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1091:	    {
    #####: 1092:	      j++;
        -: 1093:	    }
        -: 1094:	}
    #####: 1095:      if (j < choice2)
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:      //increase supply count for choosen card by amount being discarded
    #####: 1104:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:      //each other player gains a copy of revealed card
    #####: 1107:      for (i = 0; i < state->numPlayers; i++)
        -: 1108:	{
    #####: 1109:	  if (i != currentPlayer)
        -: 1110:	    {
    #####: 1111:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1112:	    }
        -: 1113:	}
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1117:
        -: 1118:      //trash copies of cards returned to supply
    #####: 1119:      for (j = 0; j < choice2; j++)
        -: 1120:	{
    #####: 1121:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:	    {
    #####: 1123:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1124:		{
    #####: 1125:		  discardCard(i, currentPlayer, state, 1);
    #####: 1126:		  break;
        -: 1127:		}
        -: 1128:	    }
        -: 1129:	}			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
        -: 1139:	    {
    #####: 1140:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		{
    #####: 1142:		  if (state->hand[i][j] == copper)
        -: 1143:		    {
    #####: 1144:		      discardCard(j, i, state, 0);
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
    #####: 1211:	if (i != currentPlayer){
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
    #####: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
    #####: 1257:  if (trashFlag < 1)
        -: 1258:    {
        -: 1259:      //add card to played pile
    #####: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
    #####: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
    #####: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
    #####: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
    #####: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
    #####: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
       13: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
       13: 1296:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:    {
        3: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
       10: 1306:  if (toFlag == 1)
        -: 1307:    {
        3: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        3: 1309:      state->deckCount[player]++;
        -: 1310:    }
        7: 1311:  else if (toFlag == 2)
        -: 1312:    {
        3: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
        4: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
       10: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
       10: 1325:  return 0;
        -: 1326:}
        -: 1327:
        2: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
        2: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
       12: 1336:  for (i = 0; i < state->handCount[player]; i++)
        -: 1337:    {
       10: 1338:      if (state->hand[player][i] == copper)
        -: 1339:	{
        8: 1340:	  state->coins += 1;
        -: 1341:	}
        2: 1342:      else if (state->hand[player][i] == silver)
        -: 1343:	{
    #####: 1344:	  state->coins += 2;
        -: 1345:	}
        2: 1346:      else if (state->hand[player][i] == gold)
        -: 1347:	{
    #####: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
        2: 1353:  state->coins += bonus;
        -: 1354:
        2: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
unittest3.c:
----Testing getCost----
 5 crads in hand at the start of the game
getcost = 5, expected = 5
->Test Passed
getcost = 6, expected = 6
->Test Passed
getcost = 4, expected = 4
->Test Passed
getcost = 3, expected = 3
->Test Passed
getcost = 3, expected = 3
->Test Passed
getcost = 5, expected = 5
->Test Passed
getcost = 4, expected = 4
->Test Passed
getcost = 4, expected = 4
->Test Passed
getcost = 3, expected = 3
->Test Passed
getcost = 4, expected = 4
->Test Passed
getcost = 5, expected = 5
->Test Passed
getcost = 3, expected = 3
->Test Passed
getcost = 4, expected = 4
->Test Passed
getcost = 4, expected = 4
->Test Passed
getcost = 0, expected = 0
->Test Passed
getcost = 2, expected = 2
->Test Passed
getcost = 5, expected = 5
->Test Passed
getcost = 8, expected = 8
->Test Passed
getcost = 0, expected = 0
->Test Passed
getcost = 6, expected = 6
->Test Passed
getcost = 4, expected = 4
->Test Passed
getcost = 4, expected = 4
->Test Passed
getcost = 3, expected = 3
->Test Passed
getcost = 5, expected = 5
->Test Passed
getcost = 2, expected = 2
->Test Passed
getcost = 4, expected = 4
->Test Passed
getcost = 4, expected = 4
->Test Passed
getcost = 5, expected = 5
->Test Passed

 Test Successfully Completed

File 'unittest3.c'
Lines executed:95.71% of 70
Creating 'unittest3.c.gcov'

File 'unittest3.c'
Lines executed:95.71% of 70
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:98.32% of 119
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 28 returned 100% blocks executed 60%
       28:   11:void assertTrue(int a, int b) {
        -:   12:
       28:   13:	if (a == b) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       28:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
    #####:   17:		printf("->Test did not Pass\n");
call    0 never executed
    #####:   18:		failed++;
        -:   19:	}
       28:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 99%
        1:   22:int main() {
        -:   23:
        1:   24:	printf("----Testing getCost----");
call    0 returned 100%
        -:   25:
        1:   26:	printf("\n 5 crads in hand at the start of the game\n");
call    0 returned 100%
        -:   27:
        1:   28:	printf("getcost = %d, expected = %d\n", getCost(mine), 5);
call    0 returned 100%
call    1 returned 100%
        1:   29:	assertTrue(getCost(mine), 5);
call    0 returned 100%
call    1 returned 100%
        -:   30:
        1:   31:	printf("getcost = %d, expected = %d\n", getCost(adventurer), 6);
call    0 returned 100%
call    1 returned 100%
        1:   32:	assertTrue(getCost(adventurer), 6);
call    0 returned 100%
call    1 returned 100%
        -:   33:
        1:   34:	printf("getcost = %d, expected = %d\n", getCost(smithy), 4);
call    0 returned 100%
call    1 returned 100%
        1:   35:	assertTrue(getCost(smithy), 4);
call    0 returned 100%
call    1 returned 100%
        -:   36:
        1:   37:	printf("getcost = %d, expected = %d\n", getCost(village), 3);
call    0 returned 100%
call    1 returned 100%
        1:   38:	assertTrue(getCost(village), 3);
call    0 returned 100%
call    1 returned 100%
        -:   39:
        1:   40:	printf("getcost = %d, expected = %d\n", getCost(great_hall), 3);
call    0 returned 100%
call    1 returned 100%
        1:   41:	assertTrue(getCost(great_hall), 3);
call    0 returned 100%
call    1 returned 100%
        -:   42:
        1:   43:	printf("getcost = %d, expected = %d\n", getCost(minion), 5);
call    0 returned 100%
call    1 returned 100%
        1:   44:	assertTrue(getCost(minion), 5);
call    0 returned 100%
call    1 returned 100%
        -:   45:
        1:   46:	printf("getcost = %d, expected = %d\n", getCost(feast), 4);
call    0 returned 100%
call    1 returned 100%
        1:   47:	assertTrue(getCost(feast), 4);
call    0 returned 100%
call    1 returned 100%
        -:   48:
        1:   49:	printf("getcost = %d, expected = %d\n", getCost(gardens), 4);
call    0 returned 100%
call    1 returned 100%
        1:   50:	assertTrue(getCost(gardens), 4);
call    0 returned 100%
call    1 returned 100%
        -:   51:
        1:   52:	printf("getcost = %d, expected = %d\n", getCost(silver), 3);
call    0 returned 100%
call    1 returned 100%
        1:   53:	assertTrue(getCost(silver), 3);
call    0 returned 100%
call    1 returned 100%
        -:   54:
        1:   55:	printf("getcost = %d, expected = %d\n", getCost(feast), 4);
call    0 returned 100%
call    1 returned 100%
        1:   56:	assertTrue(getCost(feast), 4);
call    0 returned 100%
call    1 returned 100%
        -:   57:
        1:   58:	printf("getcost = %d, expected = %d\n", getCost(council_room), 5);
call    0 returned 100%
call    1 returned 100%
        1:   59:	assertTrue(getCost(council_room), 5);
call    0 returned 100%
call    1 returned 100%
        -:   60:
        1:   61:	printf("getcost = %d, expected = %d\n", getCost(steward), 3);
call    0 returned 100%
call    1 returned 100%
        1:   62:	assertTrue(getCost(steward), 3);
call    0 returned 100%
call    1 returned 100%
        -:   63:
        1:   64:	printf("getcost = %d, expected = %d\n", getCost(sea_hag), 4);
call    0 returned 100%
call    1 returned 100%
        1:   65:	assertTrue(getCost(sea_hag), 4);
call    0 returned 100%
call    1 returned 100%
        -:   66:	
        1:   67:	printf("getcost = %d, expected = %d\n", getCost(salvager), 4);
call    0 returned 100%
call    1 returned 100%
        1:   68:	assertTrue(getCost(salvager), 4);
call    0 returned 100%
call    1 returned 100%
        -:   69:
        1:   70:	printf("getcost = %d, expected = %d\n", getCost(curse), 0);
call    0 returned 100%
call    1 returned 100%
        1:   71:	assertTrue(getCost(curse), 0);
call    0 returned 100%
call    1 returned 100%
        -:   72:
        1:   73:	printf("getcost = %d, expected = %d\n", getCost(estate), 2);
call    0 returned 100%
call    1 returned 100%
        1:   74:	assertTrue(getCost(estate), 2);
call    0 returned 100%
call    1 returned 100%
        -:   75:
        1:   76:	printf("getcost = %d, expected = %d\n", getCost(duchy), 5);
call    0 returned 100%
call    1 returned 100%
        1:   77:	assertTrue(getCost(duchy), 5);
call    0 returned 100%
call    1 returned 100%
        -:   78:
        1:   79:	printf("getcost = %d, expected = %d\n", getCost(province), 8);
call    0 returned 100%
call    1 returned 100%
        1:   80:	assertTrue(getCost(province), 8);
call    0 returned 100%
call    1 returned 100%
        -:   81:
        1:   82:	printf("getcost = %d, expected = %d\n", getCost(copper), 0);
call    0 returned 100%
call    1 returned 100%
        1:   83:	assertTrue(getCost(copper), 0);
call    0 returned 100%
call    1 returned 100%
        -:   84:
        1:   85:	printf("getcost = %d, expected = %d\n", getCost(gold), 6);
call    0 returned 100%
call    1 returned 100%
        1:   86:	assertTrue(getCost(gold), 6);
call    0 returned 100%
call    1 returned 100%
        -:   87:
        1:   88:	printf("getcost = %d, expected = %d\n", getCost(remodel), 4);
call    0 returned 100%
call    1 returned 100%
        1:   89:	assertTrue(getCost(remodel), 4);
call    0 returned 100%
call    1 returned 100%
        -:   90:
        1:   91:	printf("getcost = %d, expected = %d\n", getCost(baron), 4);
call    0 returned 100%
call    1 returned 100%
        1:   92:	assertTrue(getCost(baron), 4);
call    0 returned 100%
call    1 returned 100%
        -:   93:
        1:   94:	printf("getcost = %d, expected = %d\n", getCost(ambassador),3);
call    0 returned 100%
call    1 returned 100%
        1:   95:	assertTrue(getCost(ambassador), 3);
call    0 returned 100%
call    1 returned 100%
        -:   96:
        1:   97:	printf("getcost = %d, expected = %d\n", getCost(tribute), 5);
call    0 returned 100%
call    1 returned 100%
        1:   98:	assertTrue(getCost(tribute), 5);
call    0 returned 100%
call    1 returned 100%
        -:   99:
        1:  100:	printf("getcost = %d, expected = %d\n", getCost(embargo), 2);
call    0 returned 100%
call    1 returned 100%
        1:  101:	assertTrue(getCost(embargo), 2);
call    0 returned 100%
call    1 returned 100%
        -:  102:
        1:  103:	printf("getcost = %d, expected = %d\n", getCost(cutpurse), 4);
call    0 returned 100%
call    1 returned 100%
        1:  104:	assertTrue(getCost(cutpurse), 4);
call    0 returned 100%
call    1 returned 100%
        -:  105:
        1:  106:	printf("getcost = %d, expected = %d\n", getCost(treasure_map), 4);
call    0 returned 100%
call    1 returned 100%
        1:  107:	assertTrue(getCost(treasure_map), 4);
call    0 returned 100%
call    1 returned 100%
        -:  108:
        1:  109:	printf("getcost = %d, expected = %d\n", getCost(outpost), 5);
call    0 returned 100%
call    1 returned 100%
        1:  110:	assertTrue(getCost(outpost), 5);
call    0 returned 100%
call    1 returned 100%
        -:  111: 
        -:  112:
        1:  113:if (!failed) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  114:		printf("\n Test Successfully Completed\n");
call    0 returned 100%
        -:  115:	}
        -:  116:	else {
    #####:  117:		printf("\n Test Failed\n");
call    0 never executed
        -:  118:	}
        1:  119:	printf("\n");
call    0 returned 100%
        -:  120:
        1:  121:	return 0;
        -:  122:}
File 'dominion.c'
Lines executed:25.40% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       60:    8:int compare(const void* a, const void* b) {
       60:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       60:   11:  if (*(int*)a < *(int*)b)
       16:   12:    return -1;
       44:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        2:   44:  SelectStream(1);
        2:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       20:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       18:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        6:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        4:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       12:  143:	  state->deck[i][j] = estate;
       12:  144:	  state->deckCount[i]++;
        -:  145:	}
       32:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       28:  148:	  state->deck[i][j] = copper;
       28:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        6:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        4:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        6:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        4:  166:      state->handCount[i] = 0;
        4:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
       10:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        2:  198:  return 0;
        -:  199:}
        -:  200:
        4:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        4:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       48:  214:  while (state->deckCount[player] > 0) {
       40:  215:    card = floor(Random() * state->deckCount[player]);
       40:  216:    newDeck[newDeckPos] = state->deck[player][card];
       40:  217:    newDeckPos++;
      144:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      104:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       40:  221:    state->deckCount[player]--;
        -:  222:  }
       44:  223:  for (i = 0; i < newDeckPos; i++) {
       40:  224:    state->deck[player][i] = newDeck[i];
       40:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        4:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       13:  320:int supplyCount(int card, struct gameState *state) {
       13:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        9:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        7:  401:  j = 0;
      182:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      175:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       16:  406:	  j++;
        -:  407:	}
        -:  408:    }
        7:  409:  if ( j >= 3)
        -:  410:    {
        4:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       10:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       10:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       10:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       10:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  576:    state->deckCount[player]--;
       10:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       10:  580:  return 0;
        -:  581:}
        -:  582:
       56:  583:int getCost(int cardNumber)
        -:  584:{
       56:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        4:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo: 
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:// refactored/bugs added card
    #####:  647:void adventurer_card (int currentPlayer, int temphand[], struct gameState *state, int z){
        -:  648:
        -:  649:int cardDrawn;
    #####:  650:int drawntreasure = 0;
        -:  651:
        -:  652: // changed the drawn treasure cards to 1 instead of 2
    #####:  653:while (drawntreasure<1) {
    #####:  654:	if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:		shuffle(currentPlayer, state);
        -:  656: 	}
    #####:  657:	drawCard(currentPlayer, state);
    #####:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  660:	drawntreasure++;
        -:  661:	else {
    #####:  662:		temphand[z] = cardDrawn;
    #####:  663:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:		z++;
        -:  665:		}
        -:  666:	}	
    #####:  667:																					while (z - 1 >= 0) {
    #####:  668:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:		z  = z - 1;
        -:  670:	}
    #####:  671:}
        -:  672:
    #####:  673:void feast_card(struct gameState *state, int currentPlayer, int temphand[], int choice1){
        -:  674://gain card with cost up to 5
        -:  675://Backup hand
        -:  676:int i;
        -:  677:int x;	    
        -:  678:
    #####:  679:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  680:          temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  681:          state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  682:     }
        -:  683:    //Backup hand
        -:  684:    
        -:  685:   //Update Coins for Buy
    #####:  686:    updateCoins(currentPlayer, state, 5);
    #####:  687:    x = 1;//Condition to loop on
    #####:  688:    while( x == 1) {//Buy one card
    #####:  689: 	   if (supplyCount(choice1, state) <= 0){
        -:  690:         	  if (DEBUG)
        -:  691:	                  printf("None of that card left, sorry!\n");
        -:  692:
        -:  693:                  if (DEBUG){
        -:  694:                         printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  695:                  }
        -:  696:          }
    #####:  697:	 else if (state->coins < getCost(choice1)){
    #####:  698:              printf("That card is too expensive!\n");
        -:  699:
        -:  700:                  if (DEBUG){
        -:  701:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  702:	          }
        -:  703:	                                                                                                                                                             }
        -:  704:       else{
        -:  705:                  if (DEBUG){
        -:  706:                       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:                   }
    #####:  708:                 gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  709:                 x = 0;//No more buying cards
        -:  710:                 if (DEBUG){
        -:  711:                      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:             }
        -:  713:        }
        -:  714:   }
        -:  715://Reset Hand
    #####:  716:     for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  717:     state->hand[currentPlayer][i] = temphand[i];
    #####:  718:     temphand[i] = -1;
        -:  719:     }
    #####:  720:}                                                                                                                                                                                                                                                                                                
        -:  721:// refactored/bugs added cards
    #####:  722:void smithy_card(int currentPlayer, struct gameState *state, int handPos){
        -:  723:int i;
        -:  724://  changed +3 Cards to +2 Cards
    #####:  725:	for (i = 0; i < 2; i++)
        -:  726:	{
    #####:  727:		drawCard(currentPlayer, state);
        -:  728:	}
        -:  729:
        -:  730:	//discard card from hand
    #####:  731:	discardCard(handPos, currentPlayer, state, 0);
    #####:  732:}
        -:  733:
        -:  734:// refactored/bugs added cards
    #####:  735:void village_card (int currentPlayer,struct gameState *state, int handPos){
        -:  736:   //+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	// changed the +2 Actions to +3 Actions
    #####:  740:	state->numActions = state->numActions + 3;
        -:  741:
        -:  742:	//discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
    #####:  744:}
        -:  745: 
        -:  746:// refactored/bugs added cards
    #####:  747:void minion_card(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2){
        -:  748: 
        -:  749: //+1 action 
    #####:  750:	 state->numActions++;	
        -:  751:	//discard card from hand
    #####:  752:	discardCard(handPos, currentPlayer, state, 0);		
        -:  753:	
    #####:  754:	if (choice1)		// changed +2 coins to +3 coins
        -:  755:	{
    #####:  756:			state->coins = state->coins + 3;
        -:  757:	}
        -:  758:
    #####:  759:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  760:	{
        -:  761:		//discard hand
    #####:  762:		while (numHandCards(state) > 0)
        -:  763:		{
    #####:  764:			discardCard(handPos, currentPlayer, state, 0);
        -:  765:		}
        -:  766:
        -:  767:		//draw 4
        -:  768:		int i;		
    #####:  769:		for (i = 0; i < 4; i++)
        -:  770:		{
    #####:  771:			drawCard(currentPlayer, state);
        -:  772:		}
        -:  773:
        -:  774:		//other players discard hand and redraw if hand size > 4
    #####:  775:		for (i = 0; i < state->numPlayers; i++)
        -:  776:			{
    #####:  777:				if (i != currentPlayer)
        -:  778:				{
    #####:  779:					if (state->handCount[i] > 4)
        -:  780:					{
        -:  781:
        -:  782:						//discard hand
    #####:  783:						while (state->handCount[i] > 0)
        -:  784:						{
    #####:  785:							discardCard(handPos, i, state, 0);
        -:  786:						}	
        -:  787:
        -:  788:						//draw 4
        -:  789:						int j;
    #####:  790:						for (j = 0; j < 4; j++)
        -:  791:						{
    #####:  792:							drawCard(i, state);
        -:  793:						}
        -:  794:					}
        -:  795:				}
        -:  796:			}
        -:  797:
        -:  798:		}
    #####:  799:}		
    #####:  800:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  801:{
        -:  802:  int i;
        -:  803:  int j;
        -:  804:  int k;
        -:  805: // int x;
        -:  806:  int index;
    #####:  807:  int currentPlayer = whoseTurn(state);
    #####:  808:  int nextPlayer = currentPlayer + 1;
        -:  809:
    #####:  810:  int tributeRevealedCards[2] = {-1, -1};
        -:  811:  int temphand[MAX_HAND];// moved above the if statement
        -:  812: // int drawntreasure=0;
        -:  813://  int cardDrawn;
    #####:  814:  int z = 0;// this is the counter for the temp hand
    #####:  815:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  816:    nextPlayer = 0;
        -:  817:  }
        -:  818:  
        -:  819:	
        -:  820:  //uses switch to select card and perform actions
    #####:  821:  switch( card ) 
        -:  822:    {
        -:  823:    case adventurer:
    #####:  824:	adventurer_card(currentPlayer, temphand, state, z);
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case council_room:
        -:  828:      //+4 Cards
    #####:  829:      for (i = 0; i < 4; i++)
        -:  830:	{
    #####:  831:	  drawCard(currentPlayer, state);
        -:  832:	}
        -:  833:			
        -:  834:      //+1 Buy
    #####:  835:      state->numBuys++;
        -:  836:			
        -:  837:      //Each other player draws a card
    #####:  838:      for (i = 0; i < state->numPlayers; i++)
        -:  839:	{
    #####:  840:	  if ( i != currentPlayer )
        -:  841:	    {
    #####:  842:	      drawCard(i, state);
        -:  843:	    }
        -:  844:	}
        -:  845:			
        -:  846:      //put played card in played card pile
    #####:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:			
    #####:  849:      return 0;
        -:  850:			
        -:  851:    case feast:
    #####:  852:      feast_card(state, currentPlayer, temphand, choice1);      			
    #####:  853:      return 0;
        -:  854:			
        -:  855:    case gardens:
    #####:  856:      return -1;
        -:  857:			
        -:  858:    case mine:
    #####:  859:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:		
    #####:  866:      if (choice2 > treasure_map || choice2 < curse)
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      gainCard(choice2, state, 2, currentPlayer);
        -:  877:
        -:  878:      //discard card from hand
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:      //discard trashed card
    #####:  882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:	{
    #####:  884:	  if (state->hand[currentPlayer][i] == j)
        -:  885:	    {
    #####:  886:	      discardCard(i, currentPlayer, state, 0);			
    #####:  887:	      break;
        -:  888:	    }
        -:  889:	}
        -:  890:			
    #####:  891:      return 0;
        -:  892:			
        -:  893:    case remodel:
        -:  894:	
    #####:  895:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  896:
    #####:  897:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  898:        {
    #####:  899:          return -1;
        -:  900:        }
        -:  901:
    #####:  902:      gainCard(choice2, state, 0, currentPlayer);
        -:  903:
        -:  904:      //discard card from hand
    #####:  905:       discardCard(handPos, currentPlayer, state, 0);
        -:  906:      
        -:  907:	//discard trashed card
    #####:  908:       for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  909:          {
    #####:  910:            if (state->hand[currentPlayer][i] == j)
        -:  911:            {
    #####:  912:        	      discardCard(i, currentPlayer, state, 0);
    #####:  913:                      break;
        -:  914:            }
        -:  915:         }
        -:  916:         
    #####:  917:	return 0;
        -:  918:
        -:  919:    case smithy:
    #####:  920: 	smithy_card (currentPlayer, state, handPos);
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case village:
    #####:  924:      village_card (currentPlayer, state, handPos);
    #####:  925:      return 0;
        -:  926:		
        -:  927:    case baron:
    #####:  928:      state->numBuys++;//Increase buys by 1!
    #####:  929:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  930:	int p = 0;//Iterator for hand!
    #####:  931:	int card_not_discarded = 1;//Flag for discard set!
    #####:  932:	while(card_not_discarded){
    #####:  933:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  934:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:	    state->discardCount[currentPlayer]++;
    #####:  937:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  938:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  939:	    }
    #####:  940:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:	    state->handCount[currentPlayer]--;
    #####:  942:	    card_not_discarded = 0;//Exit the loop
        -:  943:	  }
    #####:  944:	  else if (p > state->handCount[currentPlayer]){
        -:  945:	    if(DEBUG) {
        -:  946:	      printf("No estate cards in your hand, invalid choice\n");
        -:  947:	      printf("Must gain an estate if there are any\n");
        -:  948:	    }
    #####:  949:	    if (supplyCount(estate, state) > 0){
    #####:  950:	      gainCard(estate, state, 0, currentPlayer);
    #####:  951:	      state->supplyCount[estate]--;//Decrement estates
    #####:  952:	      if (supplyCount(estate, state) == 0){
    #####:  953:		isGameOver(state);
        -:  954:	      }
        -:  955:	    }
    #####:  956:	    card_not_discarded = 0;//Exit the loop
        -:  957:	  }
        -:  958:			    
        -:  959:	  else{
    #####:  960:	    p++;//Next card
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:			    
        -:  965:      else{
    #####:  966:	if (supplyCount(estate, state) > 0){
    #####:  967:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  968:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  969:	  if (supplyCount(estate, state) == 0){
    #####:  970:	    isGameOver(state);
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case great_hall:
        -:  979:      //+1 Card
    #####:  980:      drawCard(currentPlayer, state);
        -:  981:			
        -:  982:      //+1 Actions
    #####:  983:      state->numActions++;
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case minion:
    #####:  990:      minion_card(state, handPos, currentPlayer, choice1, choice2);
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case steward:
    #####:  994:      if (choice1 == 1)
        -:  995:	{
        -:  996:	  //+2 cards
    #####:  997:	  drawCard(currentPlayer, state);
    #####:  998:	  drawCard(currentPlayer, state);
        -:  999:	}
    #####: 1000:      else if (choice1 == 2)
        -: 1001:	{
        -: 1002:	  //+2 coins
    #####: 1003:	  state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:      else
        -: 1006:	{
        -: 1007:	  //trash 2 cards in hand
    #####: 1008:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1009:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
    #####: 1013:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case tribute:
    #####: 1017:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
    #####: 1019:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	  state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:	  state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:	  //No Card to Reveal
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("No cards to reveal\n");
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:	    
        -: 1034:      else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
    #####: 1036:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1037:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:	    state->deckCount[nextPlayer]++;
    #####: 1039:	    state->discard[nextPlayer][i] = -1;
    #####: 1040:	    state->discardCount[nextPlayer]--;
        -: 1041:	  }
        -: 1042:			    
    #####: 1043:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:      }    
        -: 1052:		       
    #####: 1053:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:      }
        -: 1058:
    #####: 1059:      for (i = 0; i <= 2; i ++){
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1061:	  state->coins += 2;
        -: 1062:	}
        -: 1063:		    
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1065:	  drawCard(currentPlayer, state);
    #####: 1066:	  drawCard(currentPlayer, state);
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:	  state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case ambassador:
    #####: 1076:      j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:      if (choice2 > 2 || choice2 < 0)
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:      if (choice1 == handPos)
        -: 1084:	{
    #####: 1085:	  return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1089:	{
    #####: 1090:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1091:	    {
    #####: 1092:	      j++;
        -: 1093:	    }
        -: 1094:	}
    #####: 1095:      if (j < choice2)
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:      //increase supply count for choosen card by amount being discarded
    #####: 1104:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:      //each other player gains a copy of revealed card
    #####: 1107:      for (i = 0; i < state->numPlayers; i++)
        -: 1108:	{
    #####: 1109:	  if (i != currentPlayer)
        -: 1110:	    {
    #####: 1111:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1112:	    }
        -: 1113:	}
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1117:
        -: 1118:      //trash copies of cards returned to supply
    #####: 1119:      for (j = 0; j < choice2; j++)
        -: 1120:	{
    #####: 1121:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:	    {
    #####: 1123:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1124:		{
    #####: 1125:		  discardCard(i, currentPlayer, state, 1);
    #####: 1126:		  break;
        -: 1127:		}
        -: 1128:	    }
        -: 1129:	}			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
        -: 1139:	    {
    #####: 1140:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		{
    #####: 1142:		  if (state->hand[i][j] == copper)
        -: 1143:		    {
    #####: 1144:		      discardCard(j, i, state, 0);
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
    #####: 1211:	if (i != currentPlayer){
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
    #####: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
    #####: 1257:  if (trashFlag < 1)
        -: 1258:    {
        -: 1259:      //add card to played pile
    #####: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
    #####: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
    #####: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
    #####: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
    #####: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
    #####: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
       13: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
       13: 1296:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:    {
        3: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
       10: 1306:  if (toFlag == 1)
        -: 1307:    {
        3: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        3: 1309:      state->deckCount[player]++;
        -: 1310:    }
        7: 1311:  else if (toFlag == 2)
        -: 1312:    {
        3: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
        4: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
       10: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
       10: 1325:  return 0;
        -: 1326:}
        -: 1327:
        2: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
        2: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
       12: 1336:  for (i = 0; i < state->handCount[player]; i++)
        -: 1337:    {
       10: 1338:      if (state->hand[player][i] == copper)
        -: 1339:	{
        8: 1340:	  state->coins += 1;
        -: 1341:	}
        2: 1342:      else if (state->hand[player][i] == silver)
        -: 1343:	{
    #####: 1344:	  state->coins += 2;
        -: 1345:	}
        2: 1346:      else if (state->hand[player][i] == gold)
        -: 1347:	{
    #####: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
        2: 1353:  state->coins += bonus;
        -: 1354:
        2: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
unittest4.c:
----Testing updateCoins----

 Adding +1 copper in the treasuer card 

 hand count = 5, expected = 5
->Test Passed

 Adding +2 sliver in the treasuer card 
hand count = 7, expected = 7
->Test Passed

 Adding +3 gold in the treasuer card 
hand count = 10, expected = 10
->Test Passed

 Adding +1 copper and + 4 bonus in the treasuer card 
hand count = 15, expected = 15
->Test Passed

 Adding +3 gold and + 4 bonus in the treasuer card 
hand count = 11, expected = 11
->Test Passed

 Adding +2 s and + 4 bonus in the treasuer card 
hand count = 9, expected = 9
->Test Passed

 Test Successfully Completed

File 'unittest4.c'
Lines executed:94.92% of 59
Creating 'unittest4.c.gcov'

File 'unittest4.c'
Lines executed:94.92% of 59
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:94.87% of 39
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int failed = 0;   
        -:   10:
function assertTrue called 6 returned 100% blocks executed 60%
        6:   11:void assertTrue(int a, int b) {
        -:   12:
        6:   13:	if (a == b) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
    #####:   17:		printf("->Test did not Pass\n");
call    0 never executed
    #####:   18:	failed ++;
        -:   19:	}
        6:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 98%
        1:   22:int main() {
        1:   23:	int seed = 100;
        -:   24:	struct gameState  G;
        1:   25:	int numPlayers = 2;
        1:   26:	int thisPlayer = 0;
        1:   27:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   28:		sea_hag, tribute, smithy };
        -:   29:
        -:   30:	// initialize  the game state
        1:   31:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   32:	
        1:   33:	printf("----Testing updateCoins----\n");
call    0 returned 100%
        -:   34:
        1:   35:	printf("\n Adding +1 copper in the treasuer card \n");
call    0 returned 100%
        1:   36:	int copperrOne = G.coins;
        1:   37:	gainCard(copper, &G, 2, thisPlayer);
call    0 returned 100%
        1:   38:	updateCoins(thisPlayer, &G, 0);
call    0 returned 100%
        -:   39:
        1:   40:	printf("\n hand count = %d, expected = %d\n", G.coins, copperrOne + 1);
call    0 returned 100%
        1:   41:	assertTrue(G.coins, copperrOne + 1);
call    0 returned 100%
        -:   42:	
        1:   43:	printf("\n Adding +2 sliver in the treasuer card \n");
call    0 returned 100%
        1:   44:	int sliverTwo = G.coins;
        1:   45:	gainCard(silver, &G, 2, thisPlayer);
call    0 returned 100%
        1:   46:	updateCoins(thisPlayer, &G, 0);
call    0 returned 100%
        -:   47:
        1:   48:	printf("hand count = %d, expected = %d\n", G.coins, sliverTwo + 2);
call    0 returned 100%
        1:   49:	assertTrue(G.coins, sliverTwo + 2);
call    0 returned 100%
        -:   50:
        -:   51:
        1:   52:	printf("\n Adding +3 gold in the treasuer card \n");
call    0 returned 100%
        1:   53:	int goldThree = G.coins;
        1:   54:	gainCard(gold, &G, 2, thisPlayer);
call    0 returned 100%
        1:   55:	updateCoins(thisPlayer, &G, 0);
call    0 returned 100%
        -:   56:
        1:   57:	printf("hand count = %d, expected = %d\n", G.coins , goldThree + 3);
call    0 returned 100%
        1:   58:	assertTrue(G.coins , goldThree + 3);
call    0 returned 100%
        -:   59:	
        1:   60:	printf("\n Adding +1 copper and + 4 bonus in the treasuer card \n");
call    0 returned 100%
        1:   61:	int beforeBonus = G.coins;
        1:   62:	int bonus = 4;
        1:   63:	gainCard(copper, &G, 2, thisPlayer);
call    0 returned 100%
        1:   64:	updateCoins(thisPlayer, &G, bonus);
call    0 returned 100%
        -:   65:
        1:   66:	printf("hand count = %d, expected = %d\n", G.coins, beforeBonus + 1 + bonus);
call    0 returned 100%
        1:   67:	assertTrue(G.coins, beforeBonus + 1 +bonus);
call    0 returned 100%
        -:   68:
        1:   69:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   70:
        1:   71:	printf("\n Adding +3 gold and + 4 bonus in the treasuer card \n");
call    0 returned 100%
        1:   72:	int pre_bonus = G.coins;
        1:   73:	int with_bouns = 4;
        1:   74:	gainCard(gold, &G, 2, thisPlayer);
call    0 returned 100%
        1:   75:	updateCoins(thisPlayer, &G, with_bouns);
call    0 returned 100%
        -:   76:
        1:   77:	printf("hand count = %d, expected = %d\n", G.coins, pre_bonus + 3 + with_bouns);
call    0 returned 100%
        1:   78:	assertTrue(G.coins, pre_bonus + 3 + with_bouns);
call    0 returned 100%
        -:   79:	
        1:   80:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   81:	printf("\n Adding +2 s and + 4 bonus in the treasuer card \n");
call    0 returned 100%
        1:   82:	int preBonus = G.coins;
        1:   83:	int withBouns = 3;
        1:   84:	gainCard(silver, &G, 2, thisPlayer);
call    0 returned 100%
        1:   85:	updateCoins(thisPlayer, &G, withBouns);
call    0 returned 100%
        -:   86:
        1:   87:	printf("hand count = %d, expected = %d\n", G.coins, preBonus + 2 + withBouns);
call    0 returned 100%
        1:   88:	assertTrue(G.coins, preBonus + 2 + withBouns);
call    0 returned 100%
        -:   89:
        1:   90:	if (!failed) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   91:		printf("\n Test Successfully Completed\n"); 
call    0 returned 100%
        -:   92:	}
        -:   93:	else {
    #####:   94:		printf("\n Test Failed\n");
call    0 never executed
        -:   95:	}
        1:   96:	printf("\n");
call    0 returned 100%
        1:   97:	return 0;
        -:   98:}
File 'dominion.c'
Lines executed:25.75% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      150:    8:int compare(const void* a, const void* b) {
      150:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      150:   11:  if (*(int*)a < *(int*)b)
       40:   12:    return -1;
      110:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
        5:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       10:  115:		  if (numPlayers == 2){ 
        5:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       45:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
       25:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
       10:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       10:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      120:  214:  while (state->deckCount[player] > 0) {
      100:  215:    card = floor(Random() * state->deckCount[player]);
      100:  216:    newDeck[newDeckPos] = state->deck[player][card];
      100:  217:    newDeckPos++;
      360:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      260:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      100:  221:    state->deckCount[player]--;
        -:  222:  }
      110:  223:  for (i = 0; i < newDeckPos; i++) {
      100:  224:    state->deck[player][i] = newDeck[i];
      100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       10:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       19:  320:int supplyCount(int card, struct gameState *state) {
       19:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        9:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        7:  401:  j = 0;
      182:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      175:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       16:  406:	  j++;
        -:  407:	}
        -:  408:    }
        7:  409:  if ( j >= 3)
        -:  410:    {
        4:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       25:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       25:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       25:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       25:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       25:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       25:  576:    state->deckCount[player]--;
       25:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       25:  580:  return 0;
        -:  581:}
        -:  582:
       56:  583:int getCost(int cardNumber)
        -:  584:{
       56:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        4:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo: 
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:// refactored/bugs added card
    #####:  647:void adventurer_card (int currentPlayer, int temphand[], struct gameState *state, int z){
        -:  648:
        -:  649:int cardDrawn;
    #####:  650:int drawntreasure = 0;
        -:  651:
        -:  652: // changed the drawn treasure cards to 1 instead of 2
    #####:  653:while (drawntreasure<1) {
    #####:  654:	if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:		shuffle(currentPlayer, state);
        -:  656: 	}
    #####:  657:	drawCard(currentPlayer, state);
    #####:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  660:	drawntreasure++;
        -:  661:	else {
    #####:  662:		temphand[z] = cardDrawn;
    #####:  663:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:		z++;
        -:  665:		}
        -:  666:	}	
    #####:  667:																					while (z - 1 >= 0) {
    #####:  668:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:		z  = z - 1;
        -:  670:	}
    #####:  671:}
        -:  672:
    #####:  673:void feast_card(struct gameState *state, int currentPlayer, int temphand[], int choice1){
        -:  674://gain card with cost up to 5
        -:  675://Backup hand
        -:  676:int i;
        -:  677:int x;	    
        -:  678:
    #####:  679:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  680:          temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  681:          state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  682:     }
        -:  683:    //Backup hand
        -:  684:    
        -:  685:   //Update Coins for Buy
    #####:  686:    updateCoins(currentPlayer, state, 5);
    #####:  687:    x = 1;//Condition to loop on
    #####:  688:    while( x == 1) {//Buy one card
    #####:  689: 	   if (supplyCount(choice1, state) <= 0){
        -:  690:         	  if (DEBUG)
        -:  691:	                  printf("None of that card left, sorry!\n");
        -:  692:
        -:  693:                  if (DEBUG){
        -:  694:                         printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  695:                  }
        -:  696:          }
    #####:  697:	 else if (state->coins < getCost(choice1)){
    #####:  698:              printf("That card is too expensive!\n");
        -:  699:
        -:  700:                  if (DEBUG){
        -:  701:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  702:	          }
        -:  703:	                                                                                                                                                             }
        -:  704:       else{
        -:  705:                  if (DEBUG){
        -:  706:                       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:                   }
    #####:  708:                 gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  709:                 x = 0;//No more buying cards
        -:  710:                 if (DEBUG){
        -:  711:                      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:             }
        -:  713:        }
        -:  714:   }
        -:  715://Reset Hand
    #####:  716:     for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  717:     state->hand[currentPlayer][i] = temphand[i];
    #####:  718:     temphand[i] = -1;
        -:  719:     }
    #####:  720:}                                                                                                                                                                                                                                                                                                
        -:  721:// refactored/bugs added cards
    #####:  722:void smithy_card(int currentPlayer, struct gameState *state, int handPos){
        -:  723:int i;
        -:  724://  changed +3 Cards to +2 Cards
    #####:  725:	for (i = 0; i < 2; i++)
        -:  726:	{
    #####:  727:		drawCard(currentPlayer, state);
        -:  728:	}
        -:  729:
        -:  730:	//discard card from hand
    #####:  731:	discardCard(handPos, currentPlayer, state, 0);
    #####:  732:}
        -:  733:
        -:  734:// refactored/bugs added cards
    #####:  735:void village_card (int currentPlayer,struct gameState *state, int handPos){
        -:  736:   //+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	// changed the +2 Actions to +3 Actions
    #####:  740:	state->numActions = state->numActions + 3;
        -:  741:
        -:  742:	//discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
    #####:  744:}
        -:  745: 
        -:  746:// refactored/bugs added cards
    #####:  747:void minion_card(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2){
        -:  748: 
        -:  749: //+1 action 
    #####:  750:	 state->numActions++;	
        -:  751:	//discard card from hand
    #####:  752:	discardCard(handPos, currentPlayer, state, 0);		
        -:  753:	
    #####:  754:	if (choice1)		// changed +2 coins to +3 coins
        -:  755:	{
    #####:  756:			state->coins = state->coins + 3;
        -:  757:	}
        -:  758:
    #####:  759:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  760:	{
        -:  761:		//discard hand
    #####:  762:		while (numHandCards(state) > 0)
        -:  763:		{
    #####:  764:			discardCard(handPos, currentPlayer, state, 0);
        -:  765:		}
        -:  766:
        -:  767:		//draw 4
        -:  768:		int i;		
    #####:  769:		for (i = 0; i < 4; i++)
        -:  770:		{
    #####:  771:			drawCard(currentPlayer, state);
        -:  772:		}
        -:  773:
        -:  774:		//other players discard hand and redraw if hand size > 4
    #####:  775:		for (i = 0; i < state->numPlayers; i++)
        -:  776:			{
    #####:  777:				if (i != currentPlayer)
        -:  778:				{
    #####:  779:					if (state->handCount[i] > 4)
        -:  780:					{
        -:  781:
        -:  782:						//discard hand
    #####:  783:						while (state->handCount[i] > 0)
        -:  784:						{
    #####:  785:							discardCard(handPos, i, state, 0);
        -:  786:						}	
        -:  787:
        -:  788:						//draw 4
        -:  789:						int j;
    #####:  790:						for (j = 0; j < 4; j++)
        -:  791:						{
    #####:  792:							drawCard(i, state);
        -:  793:						}
        -:  794:					}
        -:  795:				}
        -:  796:			}
        -:  797:
        -:  798:		}
    #####:  799:}		
    #####:  800:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  801:{
        -:  802:  int i;
        -:  803:  int j;
        -:  804:  int k;
        -:  805: // int x;
        -:  806:  int index;
    #####:  807:  int currentPlayer = whoseTurn(state);
    #####:  808:  int nextPlayer = currentPlayer + 1;
        -:  809:
    #####:  810:  int tributeRevealedCards[2] = {-1, -1};
        -:  811:  int temphand[MAX_HAND];// moved above the if statement
        -:  812: // int drawntreasure=0;
        -:  813://  int cardDrawn;
    #####:  814:  int z = 0;// this is the counter for the temp hand
    #####:  815:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  816:    nextPlayer = 0;
        -:  817:  }
        -:  818:  
        -:  819:	
        -:  820:  //uses switch to select card and perform actions
    #####:  821:  switch( card ) 
        -:  822:    {
        -:  823:    case adventurer:
    #####:  824:	adventurer_card(currentPlayer, temphand, state, z);
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case council_room:
        -:  828:      //+4 Cards
    #####:  829:      for (i = 0; i < 4; i++)
        -:  830:	{
    #####:  831:	  drawCard(currentPlayer, state);
        -:  832:	}
        -:  833:			
        -:  834:      //+1 Buy
    #####:  835:      state->numBuys++;
        -:  836:			
        -:  837:      //Each other player draws a card
    #####:  838:      for (i = 0; i < state->numPlayers; i++)
        -:  839:	{
    #####:  840:	  if ( i != currentPlayer )
        -:  841:	    {
    #####:  842:	      drawCard(i, state);
        -:  843:	    }
        -:  844:	}
        -:  845:			
        -:  846:      //put played card in played card pile
    #####:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:			
    #####:  849:      return 0;
        -:  850:			
        -:  851:    case feast:
    #####:  852:      feast_card(state, currentPlayer, temphand, choice1);      			
    #####:  853:      return 0;
        -:  854:			
        -:  855:    case gardens:
    #####:  856:      return -1;
        -:  857:			
        -:  858:    case mine:
    #####:  859:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:		
    #####:  866:      if (choice2 > treasure_map || choice2 < curse)
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      gainCard(choice2, state, 2, currentPlayer);
        -:  877:
        -:  878:      //discard card from hand
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:      //discard trashed card
    #####:  882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:	{
    #####:  884:	  if (state->hand[currentPlayer][i] == j)
        -:  885:	    {
    #####:  886:	      discardCard(i, currentPlayer, state, 0);			
    #####:  887:	      break;
        -:  888:	    }
        -:  889:	}
        -:  890:			
    #####:  891:      return 0;
        -:  892:			
        -:  893:    case remodel:
        -:  894:	
    #####:  895:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  896:
    #####:  897:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  898:        {
    #####:  899:          return -1;
        -:  900:        }
        -:  901:
    #####:  902:      gainCard(choice2, state, 0, currentPlayer);
        -:  903:
        -:  904:      //discard card from hand
    #####:  905:       discardCard(handPos, currentPlayer, state, 0);
        -:  906:      
        -:  907:	//discard trashed card
    #####:  908:       for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  909:          {
    #####:  910:            if (state->hand[currentPlayer][i] == j)
        -:  911:            {
    #####:  912:        	      discardCard(i, currentPlayer, state, 0);
    #####:  913:                      break;
        -:  914:            }
        -:  915:         }
        -:  916:         
    #####:  917:	return 0;
        -:  918:
        -:  919:    case smithy:
    #####:  920: 	smithy_card (currentPlayer, state, handPos);
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case village:
    #####:  924:      village_card (currentPlayer, state, handPos);
    #####:  925:      return 0;
        -:  926:		
        -:  927:    case baron:
    #####:  928:      state->numBuys++;//Increase buys by 1!
    #####:  929:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  930:	int p = 0;//Iterator for hand!
    #####:  931:	int card_not_discarded = 1;//Flag for discard set!
    #####:  932:	while(card_not_discarded){
    #####:  933:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  934:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:	    state->discardCount[currentPlayer]++;
    #####:  937:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  938:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  939:	    }
    #####:  940:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:	    state->handCount[currentPlayer]--;
    #####:  942:	    card_not_discarded = 0;//Exit the loop
        -:  943:	  }
    #####:  944:	  else if (p > state->handCount[currentPlayer]){
        -:  945:	    if(DEBUG) {
        -:  946:	      printf("No estate cards in your hand, invalid choice\n");
        -:  947:	      printf("Must gain an estate if there are any\n");
        -:  948:	    }
    #####:  949:	    if (supplyCount(estate, state) > 0){
    #####:  950:	      gainCard(estate, state, 0, currentPlayer);
    #####:  951:	      state->supplyCount[estate]--;//Decrement estates
    #####:  952:	      if (supplyCount(estate, state) == 0){
    #####:  953:		isGameOver(state);
        -:  954:	      }
        -:  955:	    }
    #####:  956:	    card_not_discarded = 0;//Exit the loop
        -:  957:	  }
        -:  958:			    
        -:  959:	  else{
    #####:  960:	    p++;//Next card
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:			    
        -:  965:      else{
    #####:  966:	if (supplyCount(estate, state) > 0){
    #####:  967:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  968:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  969:	  if (supplyCount(estate, state) == 0){
    #####:  970:	    isGameOver(state);
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case great_hall:
        -:  979:      //+1 Card
    #####:  980:      drawCard(currentPlayer, state);
        -:  981:			
        -:  982:      //+1 Actions
    #####:  983:      state->numActions++;
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case minion:
    #####:  990:      minion_card(state, handPos, currentPlayer, choice1, choice2);
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case steward:
    #####:  994:      if (choice1 == 1)
        -:  995:	{
        -:  996:	  //+2 cards
    #####:  997:	  drawCard(currentPlayer, state);
    #####:  998:	  drawCard(currentPlayer, state);
        -:  999:	}
    #####: 1000:      else if (choice1 == 2)
        -: 1001:	{
        -: 1002:	  //+2 coins
    #####: 1003:	  state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:      else
        -: 1006:	{
        -: 1007:	  //trash 2 cards in hand
    #####: 1008:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1009:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
    #####: 1013:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case tribute:
    #####: 1017:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
    #####: 1019:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	  state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:	  state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:	  //No Card to Reveal
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("No cards to reveal\n");
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:	    
        -: 1034:      else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
    #####: 1036:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1037:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:	    state->deckCount[nextPlayer]++;
    #####: 1039:	    state->discard[nextPlayer][i] = -1;
    #####: 1040:	    state->discardCount[nextPlayer]--;
        -: 1041:	  }
        -: 1042:			    
    #####: 1043:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:      }    
        -: 1052:		       
    #####: 1053:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:      }
        -: 1058:
    #####: 1059:      for (i = 0; i <= 2; i ++){
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1061:	  state->coins += 2;
        -: 1062:	}
        -: 1063:		    
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1065:	  drawCard(currentPlayer, state);
    #####: 1066:	  drawCard(currentPlayer, state);
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:	  state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case ambassador:
    #####: 1076:      j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:      if (choice2 > 2 || choice2 < 0)
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:      if (choice1 == handPos)
        -: 1084:	{
    #####: 1085:	  return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1089:	{
    #####: 1090:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1091:	    {
    #####: 1092:	      j++;
        -: 1093:	    }
        -: 1094:	}
    #####: 1095:      if (j < choice2)
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:      //increase supply count for choosen card by amount being discarded
    #####: 1104:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:      //each other player gains a copy of revealed card
    #####: 1107:      for (i = 0; i < state->numPlayers; i++)
        -: 1108:	{
    #####: 1109:	  if (i != currentPlayer)
        -: 1110:	    {
    #####: 1111:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1112:	    }
        -: 1113:	}
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1117:
        -: 1118:      //trash copies of cards returned to supply
    #####: 1119:      for (j = 0; j < choice2; j++)
        -: 1120:	{
    #####: 1121:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:	    {
    #####: 1123:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1124:		{
    #####: 1125:		  discardCard(i, currentPlayer, state, 1);
    #####: 1126:		  break;
        -: 1127:		}
        -: 1128:	    }
        -: 1129:	}			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
        -: 1139:	    {
    #####: 1140:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		{
    #####: 1142:		  if (state->hand[i][j] == copper)
        -: 1143:		    {
    #####: 1144:		      discardCard(j, i, state, 0);
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
    #####: 1211:	if (i != currentPlayer){
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
    #####: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
    #####: 1257:  if (trashFlag < 1)
        -: 1258:    {
        -: 1259:      //add card to played pile
    #####: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
    #####: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
    #####: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
    #####: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
    #####: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
    #####: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
       19: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
       19: 1296:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:    {
        3: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
       16: 1306:  if (toFlag == 1)
        -: 1307:    {
        3: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        3: 1309:      state->deckCount[player]++;
        -: 1310:    }
       13: 1311:  else if (toFlag == 2)
        -: 1312:    {
        9: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        9: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
        4: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
       16: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
       16: 1325:  return 0;
        -: 1326:}
        -: 1327:
       11: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       11: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
       78: 1336:  for (i = 0; i < state->handCount[player]; i++)
        -: 1337:    {
       67: 1338:      if (state->hand[player][i] == copper)
        -: 1339:	{
       49: 1340:	  state->coins += 1;
        -: 1341:	}
       18: 1342:      else if (state->hand[player][i] == silver)
        -: 1343:	{
        4: 1344:	  state->coins += 2;
        -: 1345:	}
       14: 1346:      else if (state->hand[player][i] == gold)
        -: 1347:	{
        3: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       11: 1353:  state->coins += bonus;
        -: 1354:
       11: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
cardtest1.c:
----Testing smithy_card----
 Player0 hand count 3 cards
hand count = 6, expected = 7
->Test did not Pass

 Player0 deck has 3 less cards 
deck count = 3, expected = 2
->Test did not Pass

 Player0 Coin count
coins = 4, expected = 4
->Test Passed

 Number of Action  card
numAction = 1, expected = 1
->Test Passed

 Number of buys
numBuys = 1, expected = 1
->Test Passed

 change of estate piles
suplyCountt = 8, expected = 8
->Test Passed

 change of Duchy piles
suplyCountt = 8, expected = 8
->Test Passed

 change of Province piles
suplyCountt = 8, expected = 8
->Test Passed

 Test Failed

File 'cardtest1.c'
Lines executed:98.11% of 53
Creating 'cardtest1.c.gcov'

File 'cardtest1.c'
Lines executed:98.11% of 53
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
Calls executed:96.88% of 32
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 8 returned 100% blocks executed 100%
        8:   11:void assertTrue(int a, int b) {
        -:   12:
        8:   13:	if (a == b) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        6:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
        2:   17:		printf("->Test did not Pass\n");
call    0 returned 100%
        2:   18:		failed++;
        -:   19:	}
        8:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 97%
        1:   22:int main() {
        1:   23:	int seed = 100;
        -:   24:	struct gameState G, testG; 
        1:   25:	int numPlayers = 2;
        1:   26:	int thisPlayer = 0;
        1:   27:	int handpos = 0;
        1:   28:	int choice1 = 0, choice2 = 0, choice3 = 0;  // smithy do not use this, but must be added in the function cardEffect
        1:   29:	int bouns = 0;
        1:   30:	int newCards = 0;
        1:   31:	int xtraCoins = 0;
        1:   32:	int discarded = 1;
        1:   33:	int shuffledCards = 0;
        -:   34:
        1:   35:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   36:		sea_hag, tribute, smithy };
        -:   37:
        -:   38:	// initialize  the game state
        1:   39:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   40:
        1:   41:	printf("----Testing smithy_card----");
call    0 returned 100%
        -:   42:
        -:   43:	// copy the game state 
        1:   44:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   45:
        1:   46:	cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bouns);
call    0 returned 100%
        -:   47:
        1:   48:	newCards = 3;
        1:   49:	xtraCoins = 0;
        -:   50:	
        1:   51:	printf("\n Player0 hand count 3 cards\n");
call    0 returned 100%
        1:   52:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        1:   53:	assertTrue(testG.handCount[thisPlayer],G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        -:   54:
        1:   55:	printf("\n Player0 deck has 3 less cards \n");
call    0 returned 100%
        1:   56:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        1:   57:	assertTrue(testG.deckCount[thisPlayer],G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        -:   58:	
        1:   59:	printf("\n Player0 Coin count\n");
call    0 returned 100%
        1:   60:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        1:   61:	assertTrue(testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        -:   62:	
        1:   63:	printf("\n Number of Action  card\n");
call    0 returned 100%
        1:   64:	printf("numAction = %d, expected = %d\n", testG.numActions, G.numActions);
call    0 returned 100%
        1:   65:	assertTrue(testG.numActions, G.numActions);
call    0 returned 100%
        -:   66:
        1:   67:	printf("\n Number of buys\n");
call    0 returned 100%
        1:   68:	printf("numBuys = %d, expected = %d\n", testG.numBuys, G.numBuys);
call    0 returned 100%
        1:   69:	assertTrue(testG.numBuys, G.numBuys);
call    0 returned 100%
        -:   70:
        1:   71:	printf("\n change of estate piles\n");
call    0 returned 100%
        1:   72:	printf("suplyCountt = %d, expected = %d\n", testG.supplyCount[estate] , G.supplyCount[estate]);
call    0 returned 100%
        1:   73:	assertTrue(testG.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        -:   74:
        1:   75:	printf("\n change of Duchy piles\n");
call    0 returned 100%
        1:   76:	printf("suplyCountt = %d, expected = %d\n", testG.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        1:   77:	assertTrue(testG.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        -:   78:
        1:   79:	printf("\n change of Province piles\n");
call    0 returned 100%
        1:   80:	printf("suplyCountt = %d, expected = %d\n", testG.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        1:   81:	assertTrue(testG.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        -:   82:
        -:   83:	
        1:   84:	if (!failed) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   85:		printf("\n Test Successfully Completed\n");
call    0 never executed
        -:   86:	}
        -:   87:	else {
        1:   88:		printf("\n Test Failed\n");
call    0 returned 100%
        -:   89:	}
        1:   90:	printf("\n");
call    0 returned 100%
        1:   91:	return 0;
        -:   92:}
        -:   93:
        -:   94:
File 'dominion.c'
Lines executed:30.55% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      180:    8:int compare(const void* a, const void* b) {
      180:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      180:   11:  if (*(int*)a < *(int*)b)
       48:   12:    return -1;
      132:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
        6:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
        6:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       54:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
       30:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        6:  198:  return 0;
        -:  199:}
        -:  200:
       12:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
      120:  215:    card = floor(Random() * state->deckCount[player]);
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      432:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      312:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       19:  320:int supplyCount(int card, struct gameState *state) {
       19:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        9:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        7:  401:  j = 0;
      182:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      175:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       16:  406:	  j++;
        -:  407:	}
        -:  408:    }
        7:  409:  if ( j >= 3)
        -:  410:    {
        4:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       32:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       32:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       32:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       32:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       32:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       32:  576:    state->deckCount[player]--;
       32:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       32:  580:  return 0;
        -:  581:}
        -:  582:
       56:  583:int getCost(int cardNumber)
        -:  584:{
       56:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        4:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo: 
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:// refactored/bugs added card
    #####:  647:void adventurer_card (int currentPlayer, int temphand[], struct gameState *state, int z){
        -:  648:
        -:  649:int cardDrawn;
    #####:  650:int drawntreasure = 0;
        -:  651:
        -:  652: // changed the drawn treasure cards to 1 instead of 2
    #####:  653:while (drawntreasure<1) {
    #####:  654:	if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:		shuffle(currentPlayer, state);
        -:  656: 	}
    #####:  657:	drawCard(currentPlayer, state);
    #####:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  660:	drawntreasure++;
        -:  661:	else {
    #####:  662:		temphand[z] = cardDrawn;
    #####:  663:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:		z++;
        -:  665:		}
        -:  666:	}	
    #####:  667:																					while (z - 1 >= 0) {
    #####:  668:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:		z  = z - 1;
        -:  670:	}
    #####:  671:}
        -:  672:
    #####:  673:void feast_card(struct gameState *state, int currentPlayer, int temphand[], int choice1){
        -:  674://gain card with cost up to 5
        -:  675://Backup hand
        -:  676:int i;
        -:  677:int x;	    
        -:  678:
    #####:  679:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  680:          temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  681:          state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  682:     }
        -:  683:    //Backup hand
        -:  684:    
        -:  685:   //Update Coins for Buy
    #####:  686:    updateCoins(currentPlayer, state, 5);
    #####:  687:    x = 1;//Condition to loop on
    #####:  688:    while( x == 1) {//Buy one card
    #####:  689: 	   if (supplyCount(choice1, state) <= 0){
        -:  690:         	  if (DEBUG)
        -:  691:	                  printf("None of that card left, sorry!\n");
        -:  692:
        -:  693:                  if (DEBUG){
        -:  694:                         printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  695:                  }
        -:  696:          }
    #####:  697:	 else if (state->coins < getCost(choice1)){
    #####:  698:              printf("That card is too expensive!\n");
        -:  699:
        -:  700:                  if (DEBUG){
        -:  701:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  702:	          }
        -:  703:	                                                                                                                                                             }
        -:  704:       else{
        -:  705:                  if (DEBUG){
        -:  706:                       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:                   }
    #####:  708:                 gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  709:                 x = 0;//No more buying cards
        -:  710:                 if (DEBUG){
        -:  711:                      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:             }
        -:  713:        }
        -:  714:   }
        -:  715://Reset Hand
    #####:  716:     for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  717:     state->hand[currentPlayer][i] = temphand[i];
    #####:  718:     temphand[i] = -1;
        -:  719:     }
    #####:  720:}                                                                                                                                                                                                                                                                                                
        -:  721:// refactored/bugs added cards
        1:  722:void smithy_card(int currentPlayer, struct gameState *state, int handPos){
        -:  723:int i;
        -:  724://  changed +3 Cards to +2 Cards
        3:  725:	for (i = 0; i < 2; i++)
        -:  726:	{
        2:  727:		drawCard(currentPlayer, state);
        -:  728:	}
        -:  729:
        -:  730:	//discard card from hand
        1:  731:	discardCard(handPos, currentPlayer, state, 0);
        1:  732:}
        -:  733:
        -:  734:// refactored/bugs added cards
    #####:  735:void village_card (int currentPlayer,struct gameState *state, int handPos){
        -:  736:   //+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	// changed the +2 Actions to +3 Actions
    #####:  740:	state->numActions = state->numActions + 3;
        -:  741:
        -:  742:	//discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
    #####:  744:}
        -:  745: 
        -:  746:// refactored/bugs added cards
    #####:  747:void minion_card(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2){
        -:  748: 
        -:  749: //+1 action 
    #####:  750:	 state->numActions++;	
        -:  751:	//discard card from hand
    #####:  752:	discardCard(handPos, currentPlayer, state, 0);		
        -:  753:	
    #####:  754:	if (choice1)		// changed +2 coins to +3 coins
        -:  755:	{
    #####:  756:			state->coins = state->coins + 3;
        -:  757:	}
        -:  758:
    #####:  759:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  760:	{
        -:  761:		//discard hand
    #####:  762:		while (numHandCards(state) > 0)
        -:  763:		{
    #####:  764:			discardCard(handPos, currentPlayer, state, 0);
        -:  765:		}
        -:  766:
        -:  767:		//draw 4
        -:  768:		int i;		
    #####:  769:		for (i = 0; i < 4; i++)
        -:  770:		{
    #####:  771:			drawCard(currentPlayer, state);
        -:  772:		}
        -:  773:
        -:  774:		//other players discard hand and redraw if hand size > 4
    #####:  775:		for (i = 0; i < state->numPlayers; i++)
        -:  776:			{
    #####:  777:				if (i != currentPlayer)
        -:  778:				{
    #####:  779:					if (state->handCount[i] > 4)
        -:  780:					{
        -:  781:
        -:  782:						//discard hand
    #####:  783:						while (state->handCount[i] > 0)
        -:  784:						{
    #####:  785:							discardCard(handPos, i, state, 0);
        -:  786:						}	
        -:  787:
        -:  788:						//draw 4
        -:  789:						int j;
    #####:  790:						for (j = 0; j < 4; j++)
        -:  791:						{
    #####:  792:							drawCard(i, state);
        -:  793:						}
        -:  794:					}
        -:  795:				}
        -:  796:			}
        -:  797:
        -:  798:		}
    #####:  799:}		
        1:  800:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  801:{
        -:  802:  int i;
        -:  803:  int j;
        -:  804:  int k;
        -:  805: // int x;
        -:  806:  int index;
        1:  807:  int currentPlayer = whoseTurn(state);
        1:  808:  int nextPlayer = currentPlayer + 1;
        -:  809:
        1:  810:  int tributeRevealedCards[2] = {-1, -1};
        -:  811:  int temphand[MAX_HAND];// moved above the if statement
        -:  812: // int drawntreasure=0;
        -:  813://  int cardDrawn;
        1:  814:  int z = 0;// this is the counter for the temp hand
        1:  815:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  816:    nextPlayer = 0;
        -:  817:  }
        -:  818:  
        -:  819:	
        -:  820:  //uses switch to select card and perform actions
        1:  821:  switch( card ) 
        -:  822:    {
        -:  823:    case adventurer:
    #####:  824:	adventurer_card(currentPlayer, temphand, state, z);
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case council_room:
        -:  828:      //+4 Cards
    #####:  829:      for (i = 0; i < 4; i++)
        -:  830:	{
    #####:  831:	  drawCard(currentPlayer, state);
        -:  832:	}
        -:  833:			
        -:  834:      //+1 Buy
    #####:  835:      state->numBuys++;
        -:  836:			
        -:  837:      //Each other player draws a card
    #####:  838:      for (i = 0; i < state->numPlayers; i++)
        -:  839:	{
    #####:  840:	  if ( i != currentPlayer )
        -:  841:	    {
    #####:  842:	      drawCard(i, state);
        -:  843:	    }
        -:  844:	}
        -:  845:			
        -:  846:      //put played card in played card pile
    #####:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:			
    #####:  849:      return 0;
        -:  850:			
        -:  851:    case feast:
    #####:  852:      feast_card(state, currentPlayer, temphand, choice1);      			
    #####:  853:      return 0;
        -:  854:			
        -:  855:    case gardens:
    #####:  856:      return -1;
        -:  857:			
        -:  858:    case mine:
    #####:  859:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:		
    #####:  866:      if (choice2 > treasure_map || choice2 < curse)
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      gainCard(choice2, state, 2, currentPlayer);
        -:  877:
        -:  878:      //discard card from hand
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:      //discard trashed card
    #####:  882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:	{
    #####:  884:	  if (state->hand[currentPlayer][i] == j)
        -:  885:	    {
    #####:  886:	      discardCard(i, currentPlayer, state, 0);			
    #####:  887:	      break;
        -:  888:	    }
        -:  889:	}
        -:  890:			
    #####:  891:      return 0;
        -:  892:			
        -:  893:    case remodel:
        -:  894:	
    #####:  895:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  896:
    #####:  897:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  898:        {
    #####:  899:          return -1;
        -:  900:        }
        -:  901:
    #####:  902:      gainCard(choice2, state, 0, currentPlayer);
        -:  903:
        -:  904:      //discard card from hand
    #####:  905:       discardCard(handPos, currentPlayer, state, 0);
        -:  906:      
        -:  907:	//discard trashed card
    #####:  908:       for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  909:          {
    #####:  910:            if (state->hand[currentPlayer][i] == j)
        -:  911:            {
    #####:  912:        	      discardCard(i, currentPlayer, state, 0);
    #####:  913:                      break;
        -:  914:            }
        -:  915:         }
        -:  916:         
    #####:  917:	return 0;
        -:  918:
        -:  919:    case smithy:
        1:  920: 	smithy_card (currentPlayer, state, handPos);
        1:  921:      return 0;
        -:  922:		
        -:  923:    case village:
    #####:  924:      village_card (currentPlayer, state, handPos);
    #####:  925:      return 0;
        -:  926:		
        -:  927:    case baron:
    #####:  928:      state->numBuys++;//Increase buys by 1!
    #####:  929:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  930:	int p = 0;//Iterator for hand!
    #####:  931:	int card_not_discarded = 1;//Flag for discard set!
    #####:  932:	while(card_not_discarded){
    #####:  933:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  934:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:	    state->discardCount[currentPlayer]++;
    #####:  937:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  938:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  939:	    }
    #####:  940:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:	    state->handCount[currentPlayer]--;
    #####:  942:	    card_not_discarded = 0;//Exit the loop
        -:  943:	  }
    #####:  944:	  else if (p > state->handCount[currentPlayer]){
        -:  945:	    if(DEBUG) {
        -:  946:	      printf("No estate cards in your hand, invalid choice\n");
        -:  947:	      printf("Must gain an estate if there are any\n");
        -:  948:	    }
    #####:  949:	    if (supplyCount(estate, state) > 0){
    #####:  950:	      gainCard(estate, state, 0, currentPlayer);
    #####:  951:	      state->supplyCount[estate]--;//Decrement estates
    #####:  952:	      if (supplyCount(estate, state) == 0){
    #####:  953:		isGameOver(state);
        -:  954:	      }
        -:  955:	    }
    #####:  956:	    card_not_discarded = 0;//Exit the loop
        -:  957:	  }
        -:  958:			    
        -:  959:	  else{
    #####:  960:	    p++;//Next card
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:			    
        -:  965:      else{
    #####:  966:	if (supplyCount(estate, state) > 0){
    #####:  967:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  968:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  969:	  if (supplyCount(estate, state) == 0){
    #####:  970:	    isGameOver(state);
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case great_hall:
        -:  979:      //+1 Card
    #####:  980:      drawCard(currentPlayer, state);
        -:  981:			
        -:  982:      //+1 Actions
    #####:  983:      state->numActions++;
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case minion:
    #####:  990:      minion_card(state, handPos, currentPlayer, choice1, choice2);
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case steward:
    #####:  994:      if (choice1 == 1)
        -:  995:	{
        -:  996:	  //+2 cards
    #####:  997:	  drawCard(currentPlayer, state);
    #####:  998:	  drawCard(currentPlayer, state);
        -:  999:	}
    #####: 1000:      else if (choice1 == 2)
        -: 1001:	{
        -: 1002:	  //+2 coins
    #####: 1003:	  state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:      else
        -: 1006:	{
        -: 1007:	  //trash 2 cards in hand
    #####: 1008:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1009:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
    #####: 1013:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case tribute:
    #####: 1017:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
    #####: 1019:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	  state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:	  state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:	  //No Card to Reveal
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("No cards to reveal\n");
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:	    
        -: 1034:      else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
    #####: 1036:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1037:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:	    state->deckCount[nextPlayer]++;
    #####: 1039:	    state->discard[nextPlayer][i] = -1;
    #####: 1040:	    state->discardCount[nextPlayer]--;
        -: 1041:	  }
        -: 1042:			    
    #####: 1043:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:      }    
        -: 1052:		       
    #####: 1053:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:      }
        -: 1058:
    #####: 1059:      for (i = 0; i <= 2; i ++){
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1061:	  state->coins += 2;
        -: 1062:	}
        -: 1063:		    
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1065:	  drawCard(currentPlayer, state);
    #####: 1066:	  drawCard(currentPlayer, state);
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:	  state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case ambassador:
    #####: 1076:      j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:      if (choice2 > 2 || choice2 < 0)
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:      if (choice1 == handPos)
        -: 1084:	{
    #####: 1085:	  return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1089:	{
    #####: 1090:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1091:	    {
    #####: 1092:	      j++;
        -: 1093:	    }
        -: 1094:	}
    #####: 1095:      if (j < choice2)
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:      //increase supply count for choosen card by amount being discarded
    #####: 1104:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:      //each other player gains a copy of revealed card
    #####: 1107:      for (i = 0; i < state->numPlayers; i++)
        -: 1108:	{
    #####: 1109:	  if (i != currentPlayer)
        -: 1110:	    {
    #####: 1111:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1112:	    }
        -: 1113:	}
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1117:
        -: 1118:      //trash copies of cards returned to supply
    #####: 1119:      for (j = 0; j < choice2; j++)
        -: 1120:	{
    #####: 1121:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:	    {
    #####: 1123:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1124:		{
    #####: 1125:		  discardCard(i, currentPlayer, state, 1);
    #####: 1126:		  break;
        -: 1127:		}
        -: 1128:	    }
        -: 1129:	}			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
        -: 1139:	    {
    #####: 1140:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		{
    #####: 1142:		  if (state->hand[i][j] == copper)
        -: 1143:		    {
    #####: 1144:		      discardCard(j, i, state, 0);
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
    #####: 1211:	if (i != currentPlayer){
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
        1: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
        1: 1257:  if (trashFlag < 1)
        -: 1258:    {
        -: 1259:      //add card to played pile
        1: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
        1: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
        1: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        1: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
        1: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
        1: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
        1: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
        1: 1288:  return 0;
        -: 1289:}
        -: 1290:
       19: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
       19: 1296:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:    {
        3: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
       16: 1306:  if (toFlag == 1)
        -: 1307:    {
        3: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        3: 1309:      state->deckCount[player]++;
        -: 1310:    }
       13: 1311:  else if (toFlag == 2)
        -: 1312:    {
        9: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        9: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
        4: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
       16: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
       16: 1325:  return 0;
        -: 1326:}
        -: 1327:
       12: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       12: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
       84: 1336:  for (i = 0; i < state->handCount[player]; i++)
        -: 1337:    {
       72: 1338:      if (state->hand[player][i] == copper)
        -: 1339:	{
       53: 1340:	  state->coins += 1;
        -: 1341:	}
       19: 1342:      else if (state->hand[player][i] == silver)
        -: 1343:	{
        4: 1344:	  state->coins += 2;
        -: 1345:	}
       15: 1346:      else if (state->hand[player][i] == gold)
        -: 1347:	{
        3: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       12: 1353:  state->coins += bonus;
        -: 1354:
       12: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
cardtest2.c:
----Testing great_hall_card----
 Player0 receives 1 card
hand count = 5, expected = 5
->Test Passed

 Deck has less Cards
deck count = 4, expected = 4
->Test Passed

 Number of card discarded
coins = 1, expected = 1
->Test Passed

 Coin count
coins = 4, expected = 4
->Test Passed

 Player0 number of Action  card
numAction= 2, expected = 2
->Test Passed

 Number of buys
numBuys = 1, expected = 1
->Test Passed

 change of estate piles
suplyCountt = 8, expected = 8
->Test Passed

 change of Duchy piles
suplyCountt = 8, expected = 8
->Test Passed

 change of Province piles
suplyCountt = 8, expected = 8
->Test Passed

 Test Successfully Completed

File 'cardtest2.c'
Lines executed:94.83% of 58
Creating 'cardtest2.c.gcov'

File 'cardtest2.c'
Lines executed:94.83% of 58
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:94.29% of 35
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 9 returned 100% blocks executed 60%
        9:   11:void assertTrue(int a, int b) {
        -:   12:
        9:   13:	if (a == b) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        9:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
    #####:   17:		printf("->Test did not Pass\n");
call    0 never executed
    #####:   18:		failed++;
        -:   19:	}
        9:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 97%
        1:   22:int main() {
        1:   23:	int seed = 100;
        -:   24:	struct gameState G, testG; 
        1:   25:	int numPlayers = 2;
        1:   26:	int thisPlayer = 0;
        1:   27:	int handpos = 0;
        1:   28:	int choice1 = 0, choice2 = 0, choice3 = 0;  // great_hall do not use this, but must be added in the function cardEffect
        1:   29:	int bouns = 0;
        1:   30:	int newCards = 0;
        1:   31:	int xtraCoins = 0;
        1:   32:	int discarded = 1;
        1:   33:	int numActions = 0;
        1:   34:	int shuffledCards = 0;
        -:   35:
        1:   36:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   37:		sea_hag, tribute, smithy };
        -:   38:
        -:   39:	// initialize  the game state
        1:   40:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   41:
        1:   42:	printf("----Testing great_hall_card----");
call    0 returned 100%
        -:   43:
        -:   44:	// copy the game state 
        1:   45:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   46:
        1:   47:	cardEffect(great_hall, choice1, choice2, choice3, &testG, handpos, &bouns);
call    0 returned 100%
        -:   48:
        1:   49:	newCards = 1;
        1:   50:	xtraCoins = 0;
        1:   51:	numActions = 1;
        -:   52:	
        1:   53:	printf("\n Player0 receives 1 card\n");
call    0 returned 100%
        1:   54:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        1:   55:	assertTrue(testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        -:   56:
        1:   57:	printf("\n Deck has less Cards\n");
call    0 returned 100%
        1:   58:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        1:   59:	assertTrue(testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        -:   60:
        1:   61:	printf("\n Number of card discarded\n");
call    0 returned 100%
        1:   62:	printf("coins = %d, expected = %d\n", testG.playedCardCount, G.playedCardCount +discarded);
call    0 returned 100%
        1:   63:	assertTrue(testG.playedCardCount, G.playedCardCount+ discarded);
call    0 returned 100%
        -:   64:	 
        1:   65:	printf("\n Coin count\n");
call    0 returned 100%
        1:   66:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        1:   67:	assertTrue(testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        -:   68:
        1:   69:	printf("\n Player0 number of Action  card\n");
call    0 returned 100%
        1:   70:	printf("numAction= %d, expected = %d\n", testG.numActions, G.numActions + numActions);
call    0 returned 100%
        1:   71:	assertTrue(testG.numActions, G.numActions + numActions);
call    0 returned 100%
        -:   72:
        1:   73:	printf("\n Number of buys\n");
call    0 returned 100%
        1:   74:	printf("numBuys = %d, expected = %d\n", testG.numBuys, G.numBuys);
call    0 returned 100%
        1:   75:	assertTrue(testG.numBuys, G.numBuys);
call    0 returned 100%
        -:   76:
        1:   77:	printf("\n change of estate piles\n");
call    0 returned 100%
        1:   78:	printf("suplyCountt = %d, expected = %d\n", testG.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        1:   79:	assertTrue(testG.supplyCount[estate], G.supplyCount[estate]);
call    0 returned 100%
        -:   80:
        1:   81:	printf("\n change of Duchy piles\n");
call    0 returned 100%
        1:   82:	printf("suplyCountt = %d, expected = %d\n", testG.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        1:   83:	assertTrue(testG.supplyCount[duchy], G.supplyCount[duchy]);
call    0 returned 100%
        -:   84:
        1:   85:	printf("\n change of Province piles\n");
call    0 returned 100%
        1:   86:	printf("suplyCountt = %d, expected = %d\n", testG.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        1:   87:	assertTrue(testG.supplyCount[province], G.supplyCount[province]);
call    0 returned 100%
        -:   88:
        1:   89:	if (!failed) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   90:		printf("\n Test Successfully Completed\n");
call    0 returned 100%
        -:   91:	}
        -:   92:	else {
    #####:   93:		printf("\n Test Failed\n");
call    0 never executed
        -:   94:	}
        1:   95:	printf("\n");
call    0 returned 100%
        1:   96:	return 0;
        -:   97:}
File 'dominion.c'
Lines executed:31.26% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      210:    8:int compare(const void* a, const void* b) {
      210:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      210:   11:  if (*(int*)a < *(int*)b)
       56:   12:    return -1;
      154:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
        7:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        7:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       77:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      770:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        7:   87:  if (numPlayers == 2)
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        7:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:  state->supplyCount[silver] = 40;
        7:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      147:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1155:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1085:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       70:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       14:  115:		  if (numPlayers == 2){ 
        7:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       63:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       70:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       21:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       14:  140:      state->deckCount[i] = 0;
       56:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       42:  143:	  state->deck[i][j] = estate;
       42:  144:	  state->deckCount[i]++;
        -:  145:	}
      112:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       98:  148:	  state->deck[i][j] = copper;
       98:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       21:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       14:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       21:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       14:  166:      state->handCount[i] = 0;
       14:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      196:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      189:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        7:  182:  state->outpostPlayed = 0;
        7:  183:  state->phase = 0;
        7:  184:  state->numActions = 1;
        7:  185:  state->numBuys = 1;
        7:  186:  state->playedCardCount = 0;
        7:  187:  state->whoseTurn = 0;
        7:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       42:  192:  for (it = 0; it < 5; it++){
       35:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        7:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        7:  198:  return 0;
        -:  199:}
        -:  200:
       14:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       14:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       14:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       14:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      168:  214:  while (state->deckCount[player] > 0) {
      140:  215:    card = floor(Random() * state->deckCount[player]);
      140:  216:    newDeck[newDeckPos] = state->deck[player][card];
      140:  217:    newDeckPos++;
      504:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      364:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      140:  221:    state->deckCount[player]--;
        -:  222:  }
      154:  223:  for (i = 0; i < newDeckPos; i++) {
      140:  224:    state->deck[player][i] = newDeck[i];
      140:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       14:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       19:  320:int supplyCount(int card, struct gameState *state) {
       19:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        2:  346:int whoseTurn(struct gameState *state) {
        2:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        9:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        7:  401:  j = 0;
      182:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      175:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       16:  406:	  j++;
        -:  407:	}
        -:  408:    }
        7:  409:  if ( j >= 3)
        -:  410:    {
        4:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       38:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       38:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       38:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       38:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       38:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       38:  576:    state->deckCount[player]--;
       38:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       38:  580:  return 0;
        -:  581:}
        -:  582:
       56:  583:int getCost(int cardNumber)
        -:  584:{
       56:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        4:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo: 
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:// refactored/bugs added card
    #####:  647:void adventurer_card (int currentPlayer, int temphand[], struct gameState *state, int z){
        -:  648:
        -:  649:int cardDrawn;
    #####:  650:int drawntreasure = 0;
        -:  651:
        -:  652: // changed the drawn treasure cards to 1 instead of 2
    #####:  653:while (drawntreasure<1) {
    #####:  654:	if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:		shuffle(currentPlayer, state);
        -:  656: 	}
    #####:  657:	drawCard(currentPlayer, state);
    #####:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  660:	drawntreasure++;
        -:  661:	else {
    #####:  662:		temphand[z] = cardDrawn;
    #####:  663:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:		z++;
        -:  665:		}
        -:  666:	}	
    #####:  667:																					while (z - 1 >= 0) {
    #####:  668:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:		z  = z - 1;
        -:  670:	}
    #####:  671:}
        -:  672:
    #####:  673:void feast_card(struct gameState *state, int currentPlayer, int temphand[], int choice1){
        -:  674://gain card with cost up to 5
        -:  675://Backup hand
        -:  676:int i;
        -:  677:int x;	    
        -:  678:
    #####:  679:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  680:          temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  681:          state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  682:     }
        -:  683:    //Backup hand
        -:  684:    
        -:  685:   //Update Coins for Buy
    #####:  686:    updateCoins(currentPlayer, state, 5);
    #####:  687:    x = 1;//Condition to loop on
    #####:  688:    while( x == 1) {//Buy one card
    #####:  689: 	   if (supplyCount(choice1, state) <= 0){
        -:  690:         	  if (DEBUG)
        -:  691:	                  printf("None of that card left, sorry!\n");
        -:  692:
        -:  693:                  if (DEBUG){
        -:  694:                         printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  695:                  }
        -:  696:          }
    #####:  697:	 else if (state->coins < getCost(choice1)){
    #####:  698:              printf("That card is too expensive!\n");
        -:  699:
        -:  700:                  if (DEBUG){
        -:  701:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  702:	          }
        -:  703:	                                                                                                                                                             }
        -:  704:       else{
        -:  705:                  if (DEBUG){
        -:  706:                       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:                   }
    #####:  708:                 gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  709:                 x = 0;//No more buying cards
        -:  710:                 if (DEBUG){
        -:  711:                      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:             }
        -:  713:        }
        -:  714:   }
        -:  715://Reset Hand
    #####:  716:     for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  717:     state->hand[currentPlayer][i] = temphand[i];
    #####:  718:     temphand[i] = -1;
        -:  719:     }
    #####:  720:}                                                                                                                                                                                                                                                                                                
        -:  721:// refactored/bugs added cards
        1:  722:void smithy_card(int currentPlayer, struct gameState *state, int handPos){
        -:  723:int i;
        -:  724://  changed +3 Cards to +2 Cards
        3:  725:	for (i = 0; i < 2; i++)
        -:  726:	{
        2:  727:		drawCard(currentPlayer, state);
        -:  728:	}
        -:  729:
        -:  730:	//discard card from hand
        1:  731:	discardCard(handPos, currentPlayer, state, 0);
        1:  732:}
        -:  733:
        -:  734:// refactored/bugs added cards
    #####:  735:void village_card (int currentPlayer,struct gameState *state, int handPos){
        -:  736:   //+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	// changed the +2 Actions to +3 Actions
    #####:  740:	state->numActions = state->numActions + 3;
        -:  741:
        -:  742:	//discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
    #####:  744:}
        -:  745: 
        -:  746:// refactored/bugs added cards
    #####:  747:void minion_card(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2){
        -:  748: 
        -:  749: //+1 action 
    #####:  750:	 state->numActions++;	
        -:  751:	//discard card from hand
    #####:  752:	discardCard(handPos, currentPlayer, state, 0);		
        -:  753:	
    #####:  754:	if (choice1)		// changed +2 coins to +3 coins
        -:  755:	{
    #####:  756:			state->coins = state->coins + 3;
        -:  757:	}
        -:  758:
    #####:  759:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  760:	{
        -:  761:		//discard hand
    #####:  762:		while (numHandCards(state) > 0)
        -:  763:		{
    #####:  764:			discardCard(handPos, currentPlayer, state, 0);
        -:  765:		}
        -:  766:
        -:  767:		//draw 4
        -:  768:		int i;		
    #####:  769:		for (i = 0; i < 4; i++)
        -:  770:		{
    #####:  771:			drawCard(currentPlayer, state);
        -:  772:		}
        -:  773:
        -:  774:		//other players discard hand and redraw if hand size > 4
    #####:  775:		for (i = 0; i < state->numPlayers; i++)
        -:  776:			{
    #####:  777:				if (i != currentPlayer)
        -:  778:				{
    #####:  779:					if (state->handCount[i] > 4)
        -:  780:					{
        -:  781:
        -:  782:						//discard hand
    #####:  783:						while (state->handCount[i] > 0)
        -:  784:						{
    #####:  785:							discardCard(handPos, i, state, 0);
        -:  786:						}	
        -:  787:
        -:  788:						//draw 4
        -:  789:						int j;
    #####:  790:						for (j = 0; j < 4; j++)
        -:  791:						{
    #####:  792:							drawCard(i, state);
        -:  793:						}
        -:  794:					}
        -:  795:				}
        -:  796:			}
        -:  797:
        -:  798:		}
    #####:  799:}		
        2:  800:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  801:{
        -:  802:  int i;
        -:  803:  int j;
        -:  804:  int k;
        -:  805: // int x;
        -:  806:  int index;
        2:  807:  int currentPlayer = whoseTurn(state);
        2:  808:  int nextPlayer = currentPlayer + 1;
        -:  809:
        2:  810:  int tributeRevealedCards[2] = {-1, -1};
        -:  811:  int temphand[MAX_HAND];// moved above the if statement
        -:  812: // int drawntreasure=0;
        -:  813://  int cardDrawn;
        2:  814:  int z = 0;// this is the counter for the temp hand
        2:  815:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  816:    nextPlayer = 0;
        -:  817:  }
        -:  818:  
        -:  819:	
        -:  820:  //uses switch to select card and perform actions
        2:  821:  switch( card ) 
        -:  822:    {
        -:  823:    case adventurer:
    #####:  824:	adventurer_card(currentPlayer, temphand, state, z);
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case council_room:
        -:  828:      //+4 Cards
    #####:  829:      for (i = 0; i < 4; i++)
        -:  830:	{
    #####:  831:	  drawCard(currentPlayer, state);
        -:  832:	}
        -:  833:			
        -:  834:      //+1 Buy
    #####:  835:      state->numBuys++;
        -:  836:			
        -:  837:      //Each other player draws a card
    #####:  838:      for (i = 0; i < state->numPlayers; i++)
        -:  839:	{
    #####:  840:	  if ( i != currentPlayer )
        -:  841:	    {
    #####:  842:	      drawCard(i, state);
        -:  843:	    }
        -:  844:	}
        -:  845:			
        -:  846:      //put played card in played card pile
    #####:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:			
    #####:  849:      return 0;
        -:  850:			
        -:  851:    case feast:
    #####:  852:      feast_card(state, currentPlayer, temphand, choice1);      			
    #####:  853:      return 0;
        -:  854:			
        -:  855:    case gardens:
    #####:  856:      return -1;
        -:  857:			
        -:  858:    case mine:
    #####:  859:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:		
    #####:  866:      if (choice2 > treasure_map || choice2 < curse)
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      gainCard(choice2, state, 2, currentPlayer);
        -:  877:
        -:  878:      //discard card from hand
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:      //discard trashed card
    #####:  882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:	{
    #####:  884:	  if (state->hand[currentPlayer][i] == j)
        -:  885:	    {
    #####:  886:	      discardCard(i, currentPlayer, state, 0);			
    #####:  887:	      break;
        -:  888:	    }
        -:  889:	}
        -:  890:			
    #####:  891:      return 0;
        -:  892:			
        -:  893:    case remodel:
        -:  894:	
    #####:  895:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  896:
    #####:  897:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  898:        {
    #####:  899:          return -1;
        -:  900:        }
        -:  901:
    #####:  902:      gainCard(choice2, state, 0, currentPlayer);
        -:  903:
        -:  904:      //discard card from hand
    #####:  905:       discardCard(handPos, currentPlayer, state, 0);
        -:  906:      
        -:  907:	//discard trashed card
    #####:  908:       for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  909:          {
    #####:  910:            if (state->hand[currentPlayer][i] == j)
        -:  911:            {
    #####:  912:        	      discardCard(i, currentPlayer, state, 0);
    #####:  913:                      break;
        -:  914:            }
        -:  915:         }
        -:  916:         
    #####:  917:	return 0;
        -:  918:
        -:  919:    case smithy:
        1:  920: 	smithy_card (currentPlayer, state, handPos);
        1:  921:      return 0;
        -:  922:		
        -:  923:    case village:
    #####:  924:      village_card (currentPlayer, state, handPos);
    #####:  925:      return 0;
        -:  926:		
        -:  927:    case baron:
    #####:  928:      state->numBuys++;//Increase buys by 1!
    #####:  929:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  930:	int p = 0;//Iterator for hand!
    #####:  931:	int card_not_discarded = 1;//Flag for discard set!
    #####:  932:	while(card_not_discarded){
    #####:  933:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  934:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:	    state->discardCount[currentPlayer]++;
    #####:  937:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  938:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  939:	    }
    #####:  940:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:	    state->handCount[currentPlayer]--;
    #####:  942:	    card_not_discarded = 0;//Exit the loop
        -:  943:	  }
    #####:  944:	  else if (p > state->handCount[currentPlayer]){
        -:  945:	    if(DEBUG) {
        -:  946:	      printf("No estate cards in your hand, invalid choice\n");
        -:  947:	      printf("Must gain an estate if there are any\n");
        -:  948:	    }
    #####:  949:	    if (supplyCount(estate, state) > 0){
    #####:  950:	      gainCard(estate, state, 0, currentPlayer);
    #####:  951:	      state->supplyCount[estate]--;//Decrement estates
    #####:  952:	      if (supplyCount(estate, state) == 0){
    #####:  953:		isGameOver(state);
        -:  954:	      }
        -:  955:	    }
    #####:  956:	    card_not_discarded = 0;//Exit the loop
        -:  957:	  }
        -:  958:			    
        -:  959:	  else{
    #####:  960:	    p++;//Next card
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:			    
        -:  965:      else{
    #####:  966:	if (supplyCount(estate, state) > 0){
    #####:  967:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  968:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  969:	  if (supplyCount(estate, state) == 0){
    #####:  970:	    isGameOver(state);
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case great_hall:
        -:  979:      //+1 Card
        1:  980:      drawCard(currentPlayer, state);
        -:  981:			
        -:  982:      //+1 Actions
        1:  983:      state->numActions++;
        -:  984:			
        -:  985:      //discard card from hand
        1:  986:      discardCard(handPos, currentPlayer, state, 0);
        1:  987:      return 0;
        -:  988:		
        -:  989:    case minion:
    #####:  990:      minion_card(state, handPos, currentPlayer, choice1, choice2);
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case steward:
    #####:  994:      if (choice1 == 1)
        -:  995:	{
        -:  996:	  //+2 cards
    #####:  997:	  drawCard(currentPlayer, state);
    #####:  998:	  drawCard(currentPlayer, state);
        -:  999:	}
    #####: 1000:      else if (choice1 == 2)
        -: 1001:	{
        -: 1002:	  //+2 coins
    #####: 1003:	  state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:      else
        -: 1006:	{
        -: 1007:	  //trash 2 cards in hand
    #####: 1008:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1009:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
    #####: 1013:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case tribute:
    #####: 1017:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
    #####: 1019:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	  state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:	  state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:	  //No Card to Reveal
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("No cards to reveal\n");
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:	    
        -: 1034:      else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
    #####: 1036:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1037:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:	    state->deckCount[nextPlayer]++;
    #####: 1039:	    state->discard[nextPlayer][i] = -1;
    #####: 1040:	    state->discardCount[nextPlayer]--;
        -: 1041:	  }
        -: 1042:			    
    #####: 1043:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:      }    
        -: 1052:		       
    #####: 1053:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:      }
        -: 1058:
    #####: 1059:      for (i = 0; i <= 2; i ++){
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1061:	  state->coins += 2;
        -: 1062:	}
        -: 1063:		    
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1065:	  drawCard(currentPlayer, state);
    #####: 1066:	  drawCard(currentPlayer, state);
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:	  state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case ambassador:
    #####: 1076:      j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:      if (choice2 > 2 || choice2 < 0)
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:      if (choice1 == handPos)
        -: 1084:	{
    #####: 1085:	  return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1089:	{
    #####: 1090:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1091:	    {
    #####: 1092:	      j++;
        -: 1093:	    }
        -: 1094:	}
    #####: 1095:      if (j < choice2)
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:      //increase supply count for choosen card by amount being discarded
    #####: 1104:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:      //each other player gains a copy of revealed card
    #####: 1107:      for (i = 0; i < state->numPlayers; i++)
        -: 1108:	{
    #####: 1109:	  if (i != currentPlayer)
        -: 1110:	    {
    #####: 1111:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1112:	    }
        -: 1113:	}
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1117:
        -: 1118:      //trash copies of cards returned to supply
    #####: 1119:      for (j = 0; j < choice2; j++)
        -: 1120:	{
    #####: 1121:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:	    {
    #####: 1123:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1124:		{
    #####: 1125:		  discardCard(i, currentPlayer, state, 1);
    #####: 1126:		  break;
        -: 1127:		}
        -: 1128:	    }
        -: 1129:	}			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
        -: 1139:	    {
    #####: 1140:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		{
    #####: 1142:		  if (state->hand[i][j] == copper)
        -: 1143:		    {
    #####: 1144:		      discardCard(j, i, state, 0);
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
    #####: 1211:	if (i != currentPlayer){
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
        2: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
        2: 1257:  if (trashFlag < 1)
        -: 1258:    {
        -: 1259:      //add card to played pile
        2: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
        2: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
        2: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        2: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
        2: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
        2: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
        2: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
        2: 1288:  return 0;
        -: 1289:}
        -: 1290:
       19: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
       19: 1296:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:    {
        3: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
       16: 1306:  if (toFlag == 1)
        -: 1307:    {
        3: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        3: 1309:      state->deckCount[player]++;
        -: 1310:    }
       13: 1311:  else if (toFlag == 2)
        -: 1312:    {
        9: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        9: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
        4: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
       16: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
       16: 1325:  return 0;
        -: 1326:}
        -: 1327:
       13: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       13: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
       90: 1336:  for (i = 0; i < state->handCount[player]; i++)
        -: 1337:    {
       77: 1338:      if (state->hand[player][i] == copper)
        -: 1339:	{
       57: 1340:	  state->coins += 1;
        -: 1341:	}
       20: 1342:      else if (state->hand[player][i] == silver)
        -: 1343:	{
        4: 1344:	  state->coins += 2;
        -: 1345:	}
       16: 1346:      else if (state->hand[player][i] == gold)
        -: 1347:	{
        3: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       13: 1353:  state->coins += bonus;
        -: 1354:
       13: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
cardtest3.c:
----Testing adventurer_card----
 Player0 receives 2 cards
hand count = 6, expected = 7
->Test did not Pass

 Player0 gains 2 cards from the discarded piles
deck count = 4, expected = 3
->Test did not Pass

 Player0 got playedCardCount
coins = 0, expected = 0
->Test Passed

 Player0 Coin count
coins = 4, expected = 4
->Test Passed

 Player0 number of Action  card
numAction = 1, expected = 1
->Test Passed

Player0 gains 2 treasure cards
->Test did not Pass

 Test Failed

File 'cardtest3.c'
Lines executed:98.28% of 58
Creating 'cardtest3.c.gcov'

File 'cardtest3.c'
Lines executed:98.28% of 58
Branches executed:80.00% of 20
Taken at least once:60.00% of 20
Calls executed:96.00% of 25
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 6 returned 100% blocks executed 100%
        6:   11:void assertTrue(int a, int b) {
        -:   12:
        6:   13:	if (a == b) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        3:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
        3:   17:		printf("->Test did not Pass\n");
call    0 returned 100%
        3:   18:		failed++;
        -:   19:	}
        6:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 93%
        1:   22:int main() {
        1:   23:	int seed = 100;
        -:   24:	struct gameState G, testG; 
        1:   25:	int numPlayers = 2;
        1:   26:	int thisPlayer = 0;
        1:   27:	int handpos = 0;
        1:   28:	int choice1 = 0, choice2 = 0, choice3 = 0;  // adventurer do not use this, but must be added in the function cardEffect
        1:   29:	int bouns = 0;
        1:   30:	int newCards = 0;
        1:   31:	int shuffledCards = 0;
        1:   32:	int treasureCount2 = 0;
        1:   33:	int treasureCount1 = 0;
        -:   34:
        1:   35:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   36:		sea_hag, tribute, smithy };
        -:   37:
        -:   38:	// initialize  the game state
        1:   39:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   40:
        1:   41:	printf("----Testing adventurer_card----");
call    0 returned 100%
        -:   42:
        -:   43:	// copy the game state 
        1:   44:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   45:
        1:   46:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bouns);
call    0 returned 100%
        -:   47:
        1:   48:	newCards = 2;
        1:   49:	int xtraCoins = 0;
        -:   50:	
        -:   51:
        1:   52:	printf("\n Player0 receives 2 cards\n");
call    0 returned 100%
        1:   53:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards );
call    0 returned 100%
        1:   54:	assertTrue(testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards);
call    0 returned 100%
        -:   55:
        1:   56:	printf("\n Player0 gains 2 cards from the discarded piles\n");
call    0 returned 100%
        1:   57:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        1:   58:	assertTrue(testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        -:   59:
        1:   60:	printf("\n Player0 got playedCardCount\n");
call    0 returned 100%
        1:   61:	printf("coins = %d, expected = %d\n", testG.playedCardCount, G.playedCardCount);
call    0 returned 100%
        1:   62:	assertTrue(testG.playedCardCount, G.playedCardCount);
call    0 returned 100%
        -:   63:
        1:   64:	printf("\n Player0 Coin count\n");
call    0 returned 100%
        1:   65:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        1:   66:	assertTrue(testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        -:   67:
        -:   68:
        1:   69:	printf("\n Player0 number of Action  card\n");
call    0 returned 100%
        1:   70:	printf("numAction = %d, expected = %d\n", testG.numActions, G.numActions);
call    0 returned 100%
        1:   71:	assertTrue(testG.numActions, G.numActions);
call    0 returned 100%
        -:   72:
        -:   73:	// check treasure count after
        -:   74:	
        1:   75:	int cardIndex = 0;
        7:   76:	while (cardIndex < G.handCount[thisPlayer])
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   77:	{
        5:   78:		int card = G.hand[thisPlayer][cardIndex];
        5:   79:		if (card == copper || card == silver || card == gold) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:   80:			treasureCount2++;
        -:   81:		}
        5:   82:		cardIndex++;
        -:   83:	};
        -:   84:
        -:   85:	// check treasure count before 
        1:   86:	int cardIndex1 = 0;
        8:   87:	while (cardIndex1 < testG.handCount[thisPlayer])
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:   88:	{
        6:   89:		int card = testG.hand[thisPlayer][cardIndex];
        6:   90:		if (card == copper || card == silver || card == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        6:   91:			treasureCount1++;
        -:   92:		}
        6:   93:		cardIndex1++;
        -:   94:	};
        -:   95:
        -:   96:	
        1:   97:	printf("\nPlayer0 gains 2 treasure cards\n");
call    0 returned 100%
        1:   98:	assertTrue(treasureCount1 + 2, treasureCount2);
call    0 returned 100%
        -:   99:
        1:  100:	if (!failed) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  101:		printf("\n Test Successfully Completed\n");
call    0 never executed
        -:  102:	}
        -:  103:	else {
        1:  104:		printf("\n Test Failed\n");
call    0 returned 100%
        -:  105:	}
        1:  106:	printf("\n");
call    0 returned 100%
        1:  107:	return 0;
        -:  108:}
File 'dominion.c'
Lines executed:33.39% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      240:    8:int compare(const void* a, const void* b) {
      240:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      240:   11:  if (*(int*)a < *(int*)b)
       64:   12:    return -1;
      176:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       16:  115:		  if (numPlayers == 2){ 
        8:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       72:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
       40:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
       16:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       16:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       16:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       16:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      192:  214:  while (state->deckCount[player] > 0) {
      160:  215:    card = floor(Random() * state->deckCount[player]);
      160:  216:    newDeck[newDeckPos] = state->deck[player][card];
      160:  217:    newDeckPos++;
      576:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      416:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      160:  221:    state->deckCount[player]--;
        -:  222:  }
      176:  223:  for (i = 0; i < newDeckPos; i++) {
      160:  224:    state->deck[player][i] = newDeck[i];
      160:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       16:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       19:  320:int supplyCount(int card, struct gameState *state) {
       19:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        3:  346:int whoseTurn(struct gameState *state) {
        3:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        9:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        7:  401:  j = 0;
      182:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      175:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       16:  406:	  j++;
        -:  407:	}
        -:  408:    }
        7:  409:  if ( j >= 3)
        -:  410:    {
        4:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       44:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       44:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       44:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       44:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       44:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       44:  576:    state->deckCount[player]--;
       44:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       44:  580:  return 0;
        -:  581:}
        -:  582:
       56:  583:int getCost(int cardNumber)
        -:  584:{
       56:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        4:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo: 
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:// refactored/bugs added card
        1:  647:void adventurer_card (int currentPlayer, int temphand[], struct gameState *state, int z){
        -:  648:
        -:  649:int cardDrawn;
        1:  650:int drawntreasure = 0;
        -:  651:
        -:  652: // changed the drawn treasure cards to 1 instead of 2
        3:  653:while (drawntreasure<1) {
        1:  654:	if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:		shuffle(currentPlayer, state);
        -:  656: 	}
        1:  657:	drawCard(currentPlayer, state);
        1:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        1:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        1:  660:	drawntreasure++;
        -:  661:	else {
    #####:  662:		temphand[z] = cardDrawn;
    #####:  663:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:		z++;
        -:  665:		}
        -:  666:	}	
        2:  667:																					while (z - 1 >= 0) {
    #####:  668:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:		z  = z - 1;
        -:  670:	}
        1:  671:}
        -:  672:
    #####:  673:void feast_card(struct gameState *state, int currentPlayer, int temphand[], int choice1){
        -:  674://gain card with cost up to 5
        -:  675://Backup hand
        -:  676:int i;
        -:  677:int x;	    
        -:  678:
    #####:  679:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  680:          temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  681:          state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  682:     }
        -:  683:    //Backup hand
        -:  684:    
        -:  685:   //Update Coins for Buy
    #####:  686:    updateCoins(currentPlayer, state, 5);
    #####:  687:    x = 1;//Condition to loop on
    #####:  688:    while( x == 1) {//Buy one card
    #####:  689: 	   if (supplyCount(choice1, state) <= 0){
        -:  690:         	  if (DEBUG)
        -:  691:	                  printf("None of that card left, sorry!\n");
        -:  692:
        -:  693:                  if (DEBUG){
        -:  694:                         printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  695:                  }
        -:  696:          }
    #####:  697:	 else if (state->coins < getCost(choice1)){
    #####:  698:              printf("That card is too expensive!\n");
        -:  699:
        -:  700:                  if (DEBUG){
        -:  701:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  702:	          }
        -:  703:	                                                                                                                                                             }
        -:  704:       else{
        -:  705:                  if (DEBUG){
        -:  706:                       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:                   }
    #####:  708:                 gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  709:                 x = 0;//No more buying cards
        -:  710:                 if (DEBUG){
        -:  711:                      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:             }
        -:  713:        }
        -:  714:   }
        -:  715://Reset Hand
    #####:  716:     for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  717:     state->hand[currentPlayer][i] = temphand[i];
    #####:  718:     temphand[i] = -1;
        -:  719:     }
    #####:  720:}                                                                                                                                                                                                                                                                                                
        -:  721:// refactored/bugs added cards
        1:  722:void smithy_card(int currentPlayer, struct gameState *state, int handPos){
        -:  723:int i;
        -:  724://  changed +3 Cards to +2 Cards
        3:  725:	for (i = 0; i < 2; i++)
        -:  726:	{
        2:  727:		drawCard(currentPlayer, state);
        -:  728:	}
        -:  729:
        -:  730:	//discard card from hand
        1:  731:	discardCard(handPos, currentPlayer, state, 0);
        1:  732:}
        -:  733:
        -:  734:// refactored/bugs added cards
    #####:  735:void village_card (int currentPlayer,struct gameState *state, int handPos){
        -:  736:   //+1 Card
    #####:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	// changed the +2 Actions to +3 Actions
    #####:  740:	state->numActions = state->numActions + 3;
        -:  741:
        -:  742:	//discard played card from hand
    #####:  743:	discardCard(handPos, currentPlayer, state, 0);
    #####:  744:}
        -:  745: 
        -:  746:// refactored/bugs added cards
    #####:  747:void minion_card(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2){
        -:  748: 
        -:  749: //+1 action 
    #####:  750:	 state->numActions++;	
        -:  751:	//discard card from hand
    #####:  752:	discardCard(handPos, currentPlayer, state, 0);		
        -:  753:	
    #####:  754:	if (choice1)		// changed +2 coins to +3 coins
        -:  755:	{
    #####:  756:			state->coins = state->coins + 3;
        -:  757:	}
        -:  758:
    #####:  759:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  760:	{
        -:  761:		//discard hand
    #####:  762:		while (numHandCards(state) > 0)
        -:  763:		{
    #####:  764:			discardCard(handPos, currentPlayer, state, 0);
        -:  765:		}
        -:  766:
        -:  767:		//draw 4
        -:  768:		int i;		
    #####:  769:		for (i = 0; i < 4; i++)
        -:  770:		{
    #####:  771:			drawCard(currentPlayer, state);
        -:  772:		}
        -:  773:
        -:  774:		//other players discard hand and redraw if hand size > 4
    #####:  775:		for (i = 0; i < state->numPlayers; i++)
        -:  776:			{
    #####:  777:				if (i != currentPlayer)
        -:  778:				{
    #####:  779:					if (state->handCount[i] > 4)
        -:  780:					{
        -:  781:
        -:  782:						//discard hand
    #####:  783:						while (state->handCount[i] > 0)
        -:  784:						{
    #####:  785:							discardCard(handPos, i, state, 0);
        -:  786:						}	
        -:  787:
        -:  788:						//draw 4
        -:  789:						int j;
    #####:  790:						for (j = 0; j < 4; j++)
        -:  791:						{
    #####:  792:							drawCard(i, state);
        -:  793:						}
        -:  794:					}
        -:  795:				}
        -:  796:			}
        -:  797:
        -:  798:		}
    #####:  799:}		
        3:  800:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  801:{
        -:  802:  int i;
        -:  803:  int j;
        -:  804:  int k;
        -:  805: // int x;
        -:  806:  int index;
        3:  807:  int currentPlayer = whoseTurn(state);
        3:  808:  int nextPlayer = currentPlayer + 1;
        -:  809:
        3:  810:  int tributeRevealedCards[2] = {-1, -1};
        -:  811:  int temphand[MAX_HAND];// moved above the if statement
        -:  812: // int drawntreasure=0;
        -:  813://  int cardDrawn;
        3:  814:  int z = 0;// this is the counter for the temp hand
        3:  815:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  816:    nextPlayer = 0;
        -:  817:  }
        -:  818:  
        -:  819:	
        -:  820:  //uses switch to select card and perform actions
        3:  821:  switch( card ) 
        -:  822:    {
        -:  823:    case adventurer:
        1:  824:	adventurer_card(currentPlayer, temphand, state, z);
        1:  825:      return 0;
        -:  826:			
        -:  827:    case council_room:
        -:  828:      //+4 Cards
    #####:  829:      for (i = 0; i < 4; i++)
        -:  830:	{
    #####:  831:	  drawCard(currentPlayer, state);
        -:  832:	}
        -:  833:			
        -:  834:      //+1 Buy
    #####:  835:      state->numBuys++;
        -:  836:			
        -:  837:      //Each other player draws a card
    #####:  838:      for (i = 0; i < state->numPlayers; i++)
        -:  839:	{
    #####:  840:	  if ( i != currentPlayer )
        -:  841:	    {
    #####:  842:	      drawCard(i, state);
        -:  843:	    }
        -:  844:	}
        -:  845:			
        -:  846:      //put played card in played card pile
    #####:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:			
    #####:  849:      return 0;
        -:  850:			
        -:  851:    case feast:
    #####:  852:      feast_card(state, currentPlayer, temphand, choice1);      			
    #####:  853:      return 0;
        -:  854:			
        -:  855:    case gardens:
    #####:  856:      return -1;
        -:  857:			
        -:  858:    case mine:
    #####:  859:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:		
    #####:  866:      if (choice2 > treasure_map || choice2 < curse)
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      gainCard(choice2, state, 2, currentPlayer);
        -:  877:
        -:  878:      //discard card from hand
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:      //discard trashed card
    #####:  882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:	{
    #####:  884:	  if (state->hand[currentPlayer][i] == j)
        -:  885:	    {
    #####:  886:	      discardCard(i, currentPlayer, state, 0);			
    #####:  887:	      break;
        -:  888:	    }
        -:  889:	}
        -:  890:			
    #####:  891:      return 0;
        -:  892:			
        -:  893:    case remodel:
        -:  894:	
    #####:  895:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  896:
    #####:  897:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  898:        {
    #####:  899:          return -1;
        -:  900:        }
        -:  901:
    #####:  902:      gainCard(choice2, state, 0, currentPlayer);
        -:  903:
        -:  904:      //discard card from hand
    #####:  905:       discardCard(handPos, currentPlayer, state, 0);
        -:  906:      
        -:  907:	//discard trashed card
    #####:  908:       for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  909:          {
    #####:  910:            if (state->hand[currentPlayer][i] == j)
        -:  911:            {
    #####:  912:        	      discardCard(i, currentPlayer, state, 0);
    #####:  913:                      break;
        -:  914:            }
        -:  915:         }
        -:  916:         
    #####:  917:	return 0;
        -:  918:
        -:  919:    case smithy:
        1:  920: 	smithy_card (currentPlayer, state, handPos);
        1:  921:      return 0;
        -:  922:		
        -:  923:    case village:
    #####:  924:      village_card (currentPlayer, state, handPos);
    #####:  925:      return 0;
        -:  926:		
        -:  927:    case baron:
    #####:  928:      state->numBuys++;//Increase buys by 1!
    #####:  929:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  930:	int p = 0;//Iterator for hand!
    #####:  931:	int card_not_discarded = 1;//Flag for discard set!
    #####:  932:	while(card_not_discarded){
    #####:  933:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  934:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:	    state->discardCount[currentPlayer]++;
    #####:  937:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  938:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  939:	    }
    #####:  940:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:	    state->handCount[currentPlayer]--;
    #####:  942:	    card_not_discarded = 0;//Exit the loop
        -:  943:	  }
    #####:  944:	  else if (p > state->handCount[currentPlayer]){
        -:  945:	    if(DEBUG) {
        -:  946:	      printf("No estate cards in your hand, invalid choice\n");
        -:  947:	      printf("Must gain an estate if there are any\n");
        -:  948:	    }
    #####:  949:	    if (supplyCount(estate, state) > 0){
    #####:  950:	      gainCard(estate, state, 0, currentPlayer);
    #####:  951:	      state->supplyCount[estate]--;//Decrement estates
    #####:  952:	      if (supplyCount(estate, state) == 0){
    #####:  953:		isGameOver(state);
        -:  954:	      }
        -:  955:	    }
    #####:  956:	    card_not_discarded = 0;//Exit the loop
        -:  957:	  }
        -:  958:			    
        -:  959:	  else{
    #####:  960:	    p++;//Next card
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:			    
        -:  965:      else{
    #####:  966:	if (supplyCount(estate, state) > 0){
    #####:  967:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  968:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  969:	  if (supplyCount(estate, state) == 0){
    #####:  970:	    isGameOver(state);
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case great_hall:
        -:  979:      //+1 Card
        1:  980:      drawCard(currentPlayer, state);
        -:  981:			
        -:  982:      //+1 Actions
        1:  983:      state->numActions++;
        -:  984:			
        -:  985:      //discard card from hand
        1:  986:      discardCard(handPos, currentPlayer, state, 0);
        1:  987:      return 0;
        -:  988:		
        -:  989:    case minion:
    #####:  990:      minion_card(state, handPos, currentPlayer, choice1, choice2);
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case steward:
    #####:  994:      if (choice1 == 1)
        -:  995:	{
        -:  996:	  //+2 cards
    #####:  997:	  drawCard(currentPlayer, state);
    #####:  998:	  drawCard(currentPlayer, state);
        -:  999:	}
    #####: 1000:      else if (choice1 == 2)
        -: 1001:	{
        -: 1002:	  //+2 coins
    #####: 1003:	  state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:      else
        -: 1006:	{
        -: 1007:	  //trash 2 cards in hand
    #####: 1008:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1009:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
    #####: 1013:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case tribute:
    #####: 1017:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
    #####: 1019:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	  state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:	  state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:	  //No Card to Reveal
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("No cards to reveal\n");
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:	    
        -: 1034:      else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
    #####: 1036:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1037:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:	    state->deckCount[nextPlayer]++;
    #####: 1039:	    state->discard[nextPlayer][i] = -1;
    #####: 1040:	    state->discardCount[nextPlayer]--;
        -: 1041:	  }
        -: 1042:			    
    #####: 1043:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:      }    
        -: 1052:		       
    #####: 1053:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:      }
        -: 1058:
    #####: 1059:      for (i = 0; i <= 2; i ++){
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1061:	  state->coins += 2;
        -: 1062:	}
        -: 1063:		    
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1065:	  drawCard(currentPlayer, state);
    #####: 1066:	  drawCard(currentPlayer, state);
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:	  state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case ambassador:
    #####: 1076:      j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:      if (choice2 > 2 || choice2 < 0)
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:      if (choice1 == handPos)
        -: 1084:	{
    #####: 1085:	  return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1089:	{
    #####: 1090:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1091:	    {
    #####: 1092:	      j++;
        -: 1093:	    }
        -: 1094:	}
    #####: 1095:      if (j < choice2)
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:      //increase supply count for choosen card by amount being discarded
    #####: 1104:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:      //each other player gains a copy of revealed card
    #####: 1107:      for (i = 0; i < state->numPlayers; i++)
        -: 1108:	{
    #####: 1109:	  if (i != currentPlayer)
        -: 1110:	    {
    #####: 1111:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1112:	    }
        -: 1113:	}
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1117:
        -: 1118:      //trash copies of cards returned to supply
    #####: 1119:      for (j = 0; j < choice2; j++)
        -: 1120:	{
    #####: 1121:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:	    {
    #####: 1123:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1124:		{
    #####: 1125:		  discardCard(i, currentPlayer, state, 1);
    #####: 1126:		  break;
        -: 1127:		}
        -: 1128:	    }
        -: 1129:	}			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
        -: 1139:	    {
    #####: 1140:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		{
    #####: 1142:		  if (state->hand[i][j] == copper)
        -: 1143:		    {
    #####: 1144:		      discardCard(j, i, state, 0);
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
    #####: 1211:	if (i != currentPlayer){
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
        2: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
        2: 1257:  if (trashFlag < 1)
        -: 1258:    {
        -: 1259:      //add card to played pile
        2: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
        2: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
        2: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        2: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
        2: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
        2: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
        2: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
        2: 1288:  return 0;
        -: 1289:}
        -: 1290:
       19: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
       19: 1296:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:    {
        3: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
       16: 1306:  if (toFlag == 1)
        -: 1307:    {
        3: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        3: 1309:      state->deckCount[player]++;
        -: 1310:    }
       13: 1311:  else if (toFlag == 2)
        -: 1312:    {
        9: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        9: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
        4: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
       16: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
       16: 1325:  return 0;
        -: 1326:}
        -: 1327:
       14: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       14: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
       96: 1336:  for (i = 0; i < state->handCount[player]; i++)
        -: 1337:    {
       82: 1338:      if (state->hand[player][i] == copper)
        -: 1339:	{
       61: 1340:	  state->coins += 1;
        -: 1341:	}
       21: 1342:      else if (state->hand[player][i] == silver)
        -: 1343:	{
        4: 1344:	  state->coins += 2;
        -: 1345:	}
       17: 1346:      else if (state->hand[player][i] == gold)
        -: 1347:	{
        3: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       14: 1353:  state->coins += bonus;
        -: 1354:
       14: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
cardtest4.c:
----Testing village_card----
 Player0 receives 1 card
hand count = 5, expected = 5
->Test Passed

 Player0 gains 1 card from the discarded piles
deck count = 4, expected = 4
->Test Passed

 Player0 got playedCardCount
coins = 1, expected = 0
->Test did not Pass

 Player0 gain 2 Action cards
numAction = 4, expected = 3
->Test did not Pass

 Test Failed

File 'cardtest4.c'
Lines executed:97.56% of 41
Creating 'cardtest4.c.gcov'

File 'cardtest4.c'
Lines executed:97.56% of 41
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
Calls executed:95.00% of 20
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 4 returned 100% blocks executed 100%
        4:   11:void assertTrue(int a, int b) {
        -:   12:
        4:   13:	if (a == b) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
        2:   17:		printf("->Test did not Pass\n");
call    0 returned 100%
        2:   18:		failed++;
        -:   19:	}
        4:   20:}
        -:   21:
        -:   22:
function main called 1 returned 100% blocks executed 95%
        1:   23:int main() {
        1:   24:	int seed = 100;
        -:   25:	struct gameState G, testG; 
        -:   26:
        1:   27:	int numPlayers = 2;
        -:   28:
        1:   29:	int thisPlayer = 0;
        -:   30:
        1:   31:	int handpos = 0;
        1:   32:	int choice1 = 0, choice2 = 0, choice3 = 0;  // village_card do not use this, but must be added in the function cardEffect
        -:   33:
        1:   34:	int bouns = 0;
        1:   35:	int newCards = 0;
        1:   36:	int numActions = 0;
        1:   37:	int discarded = 1;
        1:   38:	int shuffledCards = 0;
        -:   39:
        1:   40:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   41:		sea_hag, tribute, smithy };
        -:   42:
        -:   43:	// initialize  the game state
        1:   44:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   45:
        1:   46:	printf("----Testing village_card----");
call    0 returned 100%
        -:   47:
        -:   48:	// copy the game state 
        1:   49:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   50:
        1:   51:	cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bouns);
call    0 returned 100%
        -:   52:
        1:   53:	newCards = 1;
        1:   54:	numActions = 2;
        -:   55:
        1:   56:	printf("\n Player0 receives 1 card\n");
call    0 returned 100%
        1:   57:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        1:   58:	assertTrue(testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        -:   59:
        1:   60:	printf("\n Player0 gains 1 card from the discarded piles\n");
call    0 returned 100%
        1:   61:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        1:   62:	assertTrue(testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        -:   63:
        1:   64:	printf("\n Player0 got playedCardCount\n");
call    0 returned 100%
        1:   65:	printf("coins = %d, expected = %d\n", testG.playedCardCount, G.playedCardCount);
call    0 returned 100%
        1:   66:	assertTrue(testG.playedCardCount, G.playedCardCount);
call    0 returned 100%
        -:   67:
        1:   68:	printf("\n Player0 gain 2 Action cards\n");
call    0 returned 100%
        1:   69:	printf("numAction = %d, expected = %d\n", testG.numActions, G.numActions + numActions);
call    0 returned 100%
        1:   70:	assertTrue(testG.numActions, G.numActions + numActions);
call    0 returned 100%
        -:   71:
        -:   72:
        1:   73:	if (!failed) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   74:		printf("\n Test Successfully Completed\n");
call    0 never executed
        -:   75:	}
        -:   76:	else {
        1:   77:		printf("\n Test Failed\n");
call    0 returned 100%
        -:   78:	}
        1:   79:	printf("\n");
call    0 returned 100%
        1:   80:	return 0;
        -:   81:}
File 'dominion.c'
Lines executed:34.64% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      270:    8:int compare(const void* a, const void* b) {
      270:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      270:   11:  if (*(int*)a < *(int*)b)
       72:   12:    return -1;
      198:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       18:  115:		  if (numPlayers == 2){ 
        9:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       81:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       27:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       27:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       27:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
       45:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
       18:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       18:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       18:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       18:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      216:  214:  while (state->deckCount[player] > 0) {
      180:  215:    card = floor(Random() * state->deckCount[player]);
      180:  216:    newDeck[newDeckPos] = state->deck[player][card];
      180:  217:    newDeckPos++;
      648:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      468:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      180:  221:    state->deckCount[player]--;
        -:  222:  }
      198:  223:  for (i = 0; i < newDeckPos; i++) {
      180:  224:    state->deck[player][i] = newDeck[i];
      180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       18:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       19:  320:int supplyCount(int card, struct gameState *state) {
       19:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        9:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        7:  401:  j = 0;
      182:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      175:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       16:  406:	  j++;
        -:  407:	}
        -:  408:    }
        7:  409:  if ( j >= 3)
        -:  410:    {
        4:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       50:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       50:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       50:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       50:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       50:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       50:  576:    state->deckCount[player]--;
       50:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       50:  580:  return 0;
        -:  581:}
        -:  582:
       56:  583:int getCost(int cardNumber)
        -:  584:{
       56:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        4:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo: 
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:// refactored/bugs added card
        1:  647:void adventurer_card (int currentPlayer, int temphand[], struct gameState *state, int z){
        -:  648:
        -:  649:int cardDrawn;
        1:  650:int drawntreasure = 0;
        -:  651:
        -:  652: // changed the drawn treasure cards to 1 instead of 2
        3:  653:while (drawntreasure<1) {
        1:  654:	if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:		shuffle(currentPlayer, state);
        -:  656: 	}
        1:  657:	drawCard(currentPlayer, state);
        1:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        1:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        1:  660:	drawntreasure++;
        -:  661:	else {
    #####:  662:		temphand[z] = cardDrawn;
    #####:  663:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:		z++;
        -:  665:		}
        -:  666:	}	
        2:  667:																					while (z - 1 >= 0) {
    #####:  668:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:		z  = z - 1;
        -:  670:	}
        1:  671:}
        -:  672:
    #####:  673:void feast_card(struct gameState *state, int currentPlayer, int temphand[], int choice1){
        -:  674://gain card with cost up to 5
        -:  675://Backup hand
        -:  676:int i;
        -:  677:int x;	    
        -:  678:
    #####:  679:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  680:          temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  681:          state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  682:     }
        -:  683:    //Backup hand
        -:  684:    
        -:  685:   //Update Coins for Buy
    #####:  686:    updateCoins(currentPlayer, state, 5);
    #####:  687:    x = 1;//Condition to loop on
    #####:  688:    while( x == 1) {//Buy one card
    #####:  689: 	   if (supplyCount(choice1, state) <= 0){
        -:  690:         	  if (DEBUG)
        -:  691:	                  printf("None of that card left, sorry!\n");
        -:  692:
        -:  693:                  if (DEBUG){
        -:  694:                         printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  695:                  }
        -:  696:          }
    #####:  697:	 else if (state->coins < getCost(choice1)){
    #####:  698:              printf("That card is too expensive!\n");
        -:  699:
        -:  700:                  if (DEBUG){
        -:  701:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  702:	          }
        -:  703:	                                                                                                                                                             }
        -:  704:       else{
        -:  705:                  if (DEBUG){
        -:  706:                       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:                   }
    #####:  708:                 gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  709:                 x = 0;//No more buying cards
        -:  710:                 if (DEBUG){
        -:  711:                      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:             }
        -:  713:        }
        -:  714:   }
        -:  715://Reset Hand
    #####:  716:     for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  717:     state->hand[currentPlayer][i] = temphand[i];
    #####:  718:     temphand[i] = -1;
        -:  719:     }
    #####:  720:}                                                                                                                                                                                                                                                                                                
        -:  721:// refactored/bugs added cards
        1:  722:void smithy_card(int currentPlayer, struct gameState *state, int handPos){
        -:  723:int i;
        -:  724://  changed +3 Cards to +2 Cards
        3:  725:	for (i = 0; i < 2; i++)
        -:  726:	{
        2:  727:		drawCard(currentPlayer, state);
        -:  728:	}
        -:  729:
        -:  730:	//discard card from hand
        1:  731:	discardCard(handPos, currentPlayer, state, 0);
        1:  732:}
        -:  733:
        -:  734:// refactored/bugs added cards
        1:  735:void village_card (int currentPlayer,struct gameState *state, int handPos){
        -:  736:   //+1 Card
        1:  737:	drawCard(currentPlayer, state);
        -:  738:
        -:  739:	// changed the +2 Actions to +3 Actions
        1:  740:	state->numActions = state->numActions + 3;
        -:  741:
        -:  742:	//discard played card from hand
        1:  743:	discardCard(handPos, currentPlayer, state, 0);
        1:  744:}
        -:  745: 
        -:  746:// refactored/bugs added cards
    #####:  747:void minion_card(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2){
        -:  748: 
        -:  749: //+1 action 
    #####:  750:	 state->numActions++;	
        -:  751:	//discard card from hand
    #####:  752:	discardCard(handPos, currentPlayer, state, 0);		
        -:  753:	
    #####:  754:	if (choice1)		// changed +2 coins to +3 coins
        -:  755:	{
    #####:  756:			state->coins = state->coins + 3;
        -:  757:	}
        -:  758:
    #####:  759:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  760:	{
        -:  761:		//discard hand
    #####:  762:		while (numHandCards(state) > 0)
        -:  763:		{
    #####:  764:			discardCard(handPos, currentPlayer, state, 0);
        -:  765:		}
        -:  766:
        -:  767:		//draw 4
        -:  768:		int i;		
    #####:  769:		for (i = 0; i < 4; i++)
        -:  770:		{
    #####:  771:			drawCard(currentPlayer, state);
        -:  772:		}
        -:  773:
        -:  774:		//other players discard hand and redraw if hand size > 4
    #####:  775:		for (i = 0; i < state->numPlayers; i++)
        -:  776:			{
    #####:  777:				if (i != currentPlayer)
        -:  778:				{
    #####:  779:					if (state->handCount[i] > 4)
        -:  780:					{
        -:  781:
        -:  782:						//discard hand
    #####:  783:						while (state->handCount[i] > 0)
        -:  784:						{
    #####:  785:							discardCard(handPos, i, state, 0);
        -:  786:						}	
        -:  787:
        -:  788:						//draw 4
        -:  789:						int j;
    #####:  790:						for (j = 0; j < 4; j++)
        -:  791:						{
    #####:  792:							drawCard(i, state);
        -:  793:						}
        -:  794:					}
        -:  795:				}
        -:  796:			}
        -:  797:
        -:  798:		}
    #####:  799:}		
        4:  800:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  801:{
        -:  802:  int i;
        -:  803:  int j;
        -:  804:  int k;
        -:  805: // int x;
        -:  806:  int index;
        4:  807:  int currentPlayer = whoseTurn(state);
        4:  808:  int nextPlayer = currentPlayer + 1;
        -:  809:
        4:  810:  int tributeRevealedCards[2] = {-1, -1};
        -:  811:  int temphand[MAX_HAND];// moved above the if statement
        -:  812: // int drawntreasure=0;
        -:  813://  int cardDrawn;
        4:  814:  int z = 0;// this is the counter for the temp hand
        4:  815:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  816:    nextPlayer = 0;
        -:  817:  }
        -:  818:  
        -:  819:	
        -:  820:  //uses switch to select card and perform actions
        4:  821:  switch( card ) 
        -:  822:    {
        -:  823:    case adventurer:
        1:  824:	adventurer_card(currentPlayer, temphand, state, z);
        1:  825:      return 0;
        -:  826:			
        -:  827:    case council_room:
        -:  828:      //+4 Cards
    #####:  829:      for (i = 0; i < 4; i++)
        -:  830:	{
    #####:  831:	  drawCard(currentPlayer, state);
        -:  832:	}
        -:  833:			
        -:  834:      //+1 Buy
    #####:  835:      state->numBuys++;
        -:  836:			
        -:  837:      //Each other player draws a card
    #####:  838:      for (i = 0; i < state->numPlayers; i++)
        -:  839:	{
    #####:  840:	  if ( i != currentPlayer )
        -:  841:	    {
    #####:  842:	      drawCard(i, state);
        -:  843:	    }
        -:  844:	}
        -:  845:			
        -:  846:      //put played card in played card pile
    #####:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:			
    #####:  849:      return 0;
        -:  850:			
        -:  851:    case feast:
    #####:  852:      feast_card(state, currentPlayer, temphand, choice1);      			
    #####:  853:      return 0;
        -:  854:			
        -:  855:    case gardens:
    #####:  856:      return -1;
        -:  857:			
        -:  858:    case mine:
    #####:  859:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:		
    #####:  866:      if (choice2 > treasure_map || choice2 < curse)
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      gainCard(choice2, state, 2, currentPlayer);
        -:  877:
        -:  878:      //discard card from hand
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:      //discard trashed card
    #####:  882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:	{
    #####:  884:	  if (state->hand[currentPlayer][i] == j)
        -:  885:	    {
    #####:  886:	      discardCard(i, currentPlayer, state, 0);			
    #####:  887:	      break;
        -:  888:	    }
        -:  889:	}
        -:  890:			
    #####:  891:      return 0;
        -:  892:			
        -:  893:    case remodel:
        -:  894:	
    #####:  895:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  896:
    #####:  897:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  898:        {
    #####:  899:          return -1;
        -:  900:        }
        -:  901:
    #####:  902:      gainCard(choice2, state, 0, currentPlayer);
        -:  903:
        -:  904:      //discard card from hand
    #####:  905:       discardCard(handPos, currentPlayer, state, 0);
        -:  906:      
        -:  907:	//discard trashed card
    #####:  908:       for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  909:          {
    #####:  910:            if (state->hand[currentPlayer][i] == j)
        -:  911:            {
    #####:  912:        	      discardCard(i, currentPlayer, state, 0);
    #####:  913:                      break;
        -:  914:            }
        -:  915:         }
        -:  916:         
    #####:  917:	return 0;
        -:  918:
        -:  919:    case smithy:
        1:  920: 	smithy_card (currentPlayer, state, handPos);
        1:  921:      return 0;
        -:  922:		
        -:  923:    case village:
        1:  924:      village_card (currentPlayer, state, handPos);
        1:  925:      return 0;
        -:  926:		
        -:  927:    case baron:
    #####:  928:      state->numBuys++;//Increase buys by 1!
    #####:  929:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  930:	int p = 0;//Iterator for hand!
    #####:  931:	int card_not_discarded = 1;//Flag for discard set!
    #####:  932:	while(card_not_discarded){
    #####:  933:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  934:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:	    state->discardCount[currentPlayer]++;
    #####:  937:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  938:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  939:	    }
    #####:  940:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:	    state->handCount[currentPlayer]--;
    #####:  942:	    card_not_discarded = 0;//Exit the loop
        -:  943:	  }
    #####:  944:	  else if (p > state->handCount[currentPlayer]){
        -:  945:	    if(DEBUG) {
        -:  946:	      printf("No estate cards in your hand, invalid choice\n");
        -:  947:	      printf("Must gain an estate if there are any\n");
        -:  948:	    }
    #####:  949:	    if (supplyCount(estate, state) > 0){
    #####:  950:	      gainCard(estate, state, 0, currentPlayer);
    #####:  951:	      state->supplyCount[estate]--;//Decrement estates
    #####:  952:	      if (supplyCount(estate, state) == 0){
    #####:  953:		isGameOver(state);
        -:  954:	      }
        -:  955:	    }
    #####:  956:	    card_not_discarded = 0;//Exit the loop
        -:  957:	  }
        -:  958:			    
        -:  959:	  else{
    #####:  960:	    p++;//Next card
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:			    
        -:  965:      else{
    #####:  966:	if (supplyCount(estate, state) > 0){
    #####:  967:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  968:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  969:	  if (supplyCount(estate, state) == 0){
    #####:  970:	    isGameOver(state);
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case great_hall:
        -:  979:      //+1 Card
        1:  980:      drawCard(currentPlayer, state);
        -:  981:			
        -:  982:      //+1 Actions
        1:  983:      state->numActions++;
        -:  984:			
        -:  985:      //discard card from hand
        1:  986:      discardCard(handPos, currentPlayer, state, 0);
        1:  987:      return 0;
        -:  988:		
        -:  989:    case minion:
    #####:  990:      minion_card(state, handPos, currentPlayer, choice1, choice2);
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case steward:
    #####:  994:      if (choice1 == 1)
        -:  995:	{
        -:  996:	  //+2 cards
    #####:  997:	  drawCard(currentPlayer, state);
    #####:  998:	  drawCard(currentPlayer, state);
        -:  999:	}
    #####: 1000:      else if (choice1 == 2)
        -: 1001:	{
        -: 1002:	  //+2 coins
    #####: 1003:	  state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:      else
        -: 1006:	{
        -: 1007:	  //trash 2 cards in hand
    #####: 1008:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1009:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
    #####: 1013:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case tribute:
    #####: 1017:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
    #####: 1019:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	  state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:	  state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:	  //No Card to Reveal
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("No cards to reveal\n");
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:	    
        -: 1034:      else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
    #####: 1036:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1037:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:	    state->deckCount[nextPlayer]++;
    #####: 1039:	    state->discard[nextPlayer][i] = -1;
    #####: 1040:	    state->discardCount[nextPlayer]--;
        -: 1041:	  }
        -: 1042:			    
    #####: 1043:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:      }    
        -: 1052:		       
    #####: 1053:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:      }
        -: 1058:
    #####: 1059:      for (i = 0; i <= 2; i ++){
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1061:	  state->coins += 2;
        -: 1062:	}
        -: 1063:		    
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1065:	  drawCard(currentPlayer, state);
    #####: 1066:	  drawCard(currentPlayer, state);
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:	  state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case ambassador:
    #####: 1076:      j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:      if (choice2 > 2 || choice2 < 0)
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:      if (choice1 == handPos)
        -: 1084:	{
    #####: 1085:	  return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1089:	{
    #####: 1090:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1091:	    {
    #####: 1092:	      j++;
        -: 1093:	    }
        -: 1094:	}
    #####: 1095:      if (j < choice2)
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:      //increase supply count for choosen card by amount being discarded
    #####: 1104:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:      //each other player gains a copy of revealed card
    #####: 1107:      for (i = 0; i < state->numPlayers; i++)
        -: 1108:	{
    #####: 1109:	  if (i != currentPlayer)
        -: 1110:	    {
    #####: 1111:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1112:	    }
        -: 1113:	}
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1117:
        -: 1118:      //trash copies of cards returned to supply
    #####: 1119:      for (j = 0; j < choice2; j++)
        -: 1120:	{
    #####: 1121:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:	    {
    #####: 1123:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1124:		{
    #####: 1125:		  discardCard(i, currentPlayer, state, 1);
    #####: 1126:		  break;
        -: 1127:		}
        -: 1128:	    }
        -: 1129:	}			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
        -: 1139:	    {
    #####: 1140:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		{
    #####: 1142:		  if (state->hand[i][j] == copper)
        -: 1143:		    {
    #####: 1144:		      discardCard(j, i, state, 0);
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
    #####: 1211:	if (i != currentPlayer){
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
        3: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
        3: 1257:  if (trashFlag < 1)
        -: 1258:    {
        -: 1259:      //add card to played pile
        3: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
        3: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
        3: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        3: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
        3: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
        3: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
        3: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
        3: 1288:  return 0;
        -: 1289:}
        -: 1290:
       19: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
       19: 1296:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:    {
        3: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
       16: 1306:  if (toFlag == 1)
        -: 1307:    {
        3: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        3: 1309:      state->deckCount[player]++;
        -: 1310:    }
       13: 1311:  else if (toFlag == 2)
        -: 1312:    {
        9: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        9: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
        4: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
       16: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
       16: 1325:  return 0;
        -: 1326:}
        -: 1327:
       15: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       15: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
      102: 1336:  for (i = 0; i < state->handCount[player]; i++)
        -: 1337:    {
       87: 1338:      if (state->hand[player][i] == copper)
        -: 1339:	{
       65: 1340:	  state->coins += 1;
        -: 1341:	}
       22: 1342:      else if (state->hand[player][i] == silver)
        -: 1343:	{
        4: 1344:	  state->coins += 2;
        -: 1345:	}
       18: 1346:      else if (state->hand[player][i] == gold)
        -: 1347:	{
        3: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       15: 1353:  state->coins += bonus;
        -: 1354:
       15: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
