        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:   
        -:    9:int failed = 0;
        -:   10:
function assertTrue called 4 returned 100% blocks executed 60%
        4:   11:void assertTrue(int a, int b) {
        -:   12:
        4:   13:	if (a == b) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   14:		printf("->Test Passed\n");
call    0 returned 100%
        -:   15:	}
        -:   16:	else {
    #####:   17:		printf("->Test did not Pass\n");
call    0 never executed
    #####:   18:		failed++;
        -:   19:	}
        4:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 97%
        1:   22:int main() {
        1:   23:	int seed = 100;
        -:   24:	struct gameState testG, G;
        1:   25:	int numPlayers = 2;
        1:   26:	int supplyPilesNum = 25;
        -:   27:
        1:   28:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   29:		sea_hag, tribute, smithy };
        -:   30:
        -:   31:	// initialize  the game state
        1:   32:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   33:
        -:   34:	int i;
       26:   35:	for (i = 0; i < supplyPilesNum; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       25:   36:		G.supplyCount[i] = 1;
        1:   37:		isGameOver(&G);
call    0 returned 100%
        -:   38:
        1:   39:	printf("----Testing isGameOver----");
call    0 returned 100%
        -:   40:	
        -:   41:	// copy the game state 
        1:   42:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   43:
        1:   44:	printf("\n Game is  over \n");
call    0 returned 100%
        1:   45:	printf(" supply count = %d, expected = %d\n", isGameOver(&G), 0);
call    0 returned 100%
call    1 returned 100%
        1:   46:	assertTrue(isGameOver(&G),  0);
call    0 returned 100%
call    1 returned 100%
        -:   47:	
        1:   48:	printf("\n Game is Over \n");
call    0 returned 100%
        1:   49:	G.supplyCount[province] = 0;
        1:   50:	printf(" supply count = %d, expected = %d\n", isGameOver(&G), 1);
call    0 returned 100%
call    1 returned 100%
        1:   51:	assertTrue(isGameOver(&G), 1);
call    0 returned 100%
call    1 returned 100%
        -:   52:
        1:   53:	printf("\n Game is Over \n");
call    0 returned 100%
        1:   54:	G.supplyCount[province] = 1;
        1:   55:	G.supplyCount[gold] = 0;
        1:   56:	G.supplyCount[mine] = 0;
        1:   57:	G.supplyCount[village] = 0;
        1:   58:	printf(" supply count = %d, expected = %d\n", isGameOver(&G), 1);
call    0 returned 100%
call    1 returned 100%
        1:   59:	assertTrue(isGameOver(&G), 1);
call    0 returned 100%
call    1 returned 100%
        -:   60:	
        1:   61:	printf("\n Game is Over \n");
call    0 returned 100%
        1:   62:	G.supplyCount[province] = 1;
        1:   63:	G.supplyCount[smithy] = 0;
        1:   64:	G.supplyCount[treasure_map] = 0;
        1:   65:	G.supplyCount[great_hall] = 0;
        1:   66:	printf(" supply count = %d, expected = %d\n", isGameOver(&G), 1);
call    0 returned 100%
call    1 returned 100%
        1:   67:	assertTrue(isGameOver(&G), 1);
call    0 returned 100%
call    1 returned 100%
        -:   68:
        1:   69:if (!failed) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   70:		printf("\n Test Successfully Completed\n");
call    0 returned 100%
        -:   71:	}
        -:   72:	else {
    #####:   73:		printf("\n Test Failed\n");
call    0 never executed
        -:   74:	}
        1:   75:	printf("\n");
call    0 returned 100%
        -:   76:
        1:   77:	return 0;
        -:   78:}
